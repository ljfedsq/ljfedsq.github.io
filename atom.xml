<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhanmin&#39;s blog</title>
  <subtitle>拾金之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-19T09:46:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhanmin</name>
    <email>ljfedsq@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS预处理语言学习笔记</title>
    <link href="http://yoursite.com/2017/10/14/CSS%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/14/CSS预处理语言学习笔记/</id>
    <published>2017-10-14T05:18:29.000Z</published>
    <updated>2017-10-19T09:46:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是博主在学习CSS预处理语言时，通过参考文档学习并对比了Sass、LESS、Stylus三者预处理语言，并对它们的背景、特性及使用方法进行了解和学习。希望给大家有所参考。</p>
<a id="more"></a>
<h2 id="CSS预处理"><a href="#CSS预处理" class="headerlink" title="CSS预处理"></a>CSS预处理</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>CSS(Cascading Style Sheet)被译为级联样式表，或称之”风格样式表”，主要用来进行网页风格设计。通过设立样式表，可以统一控制HTML中各标签的显示属性。如外观、位置、动效等。然而，它不是一种编程语言，仅仅是一行行单纯的属性描述，而没有自己的变量、常量、条件语句等编程语法。</p>
<p>因此，诞生了“CSS预处理器（CSS Preprocessor）”。</p>
<p>CSS预处理器——定义了一种新的语言，基本思想是用一种专门的编程语言，为CSS增加一些编程的特性，将CSS作为目标生成文件。</p>
<p>优点——使CSS更加简洁、适应性更强、可读性更加，更易于代码的维护等。</p>
<p>种类——Sass（SCSS）、LESS、Stylus、Turbine、Switch CSS、CSS Cacheer、DT CSS等。</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="Sass背景介绍"><a href="#Sass背景介绍" class="headerlink" title="Sass背景介绍"></a>Sass背景介绍</h4><p>Sass是对CSS的语法的一种扩充，诞生于2007年，最早最成熟的一款CSS预处理器语言，它可以使用变量、常量、嵌套、混入、函数等功能。然而它本身的语法不太容易让浏览器识别，所以需要编译出合法的CSS让浏览器使用。</p>
<p>两套语法：</p>
<ul>
<li>Sass作为后缀：用缩进作为分隔符来区分代码块</li>
<li>SCSS作为后缀（Sass3后都支持）:采用大括号（{}）作为分隔符</li>
</ul>
<h4 id="LESS背景介绍"><a href="#LESS背景介绍" class="headerlink" title="LESS背景介绍"></a>LESS背景介绍</h4><p>LESS是2009年的一个开源项目，受Sass影响较大，但又使用CSS的语法。提供多种方式能平滑的将写好的代码转化成标准的CSS代码。</p>
<h4 id="Stylus-背景介绍"><a href="#Stylus-背景介绍" class="headerlink" title="Stylus 背景介绍"></a>Stylus 背景介绍</h4><p>2010年产生，来自于Node.js社区，主要用来给Node项目进行CSS预处理支持。提供一个高效、动态和使用表达方式来生成CSS，以供浏览器使用。Stylus同时支持缩进和CSS常规样式书写规则。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>上面三种CSS预处理语言具有一些相同的特性，如变量、混入、嵌套、函数等。</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>在CSS预处理器语言中可以声明变量，并在整个样式表中使用。</p>
<ol>
<li><p>Sass的变量</p>
<p>必须是“$”开头，后面紧跟变量名和变量值，且变量名和变量值之间用冒号（：）隔开，如下所示：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mainColor</span>: <span class="number">#963</span>;</div><div class="line"><span class="variable">$sitWidth</span>: <span class="number">1024px</span>;</div><div class="line"><span class="variable">$borderStyle</span>: dotted;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$mainColor</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="variable">$borderStyle</span> <span class="variable">$mainColor</span>;</div><div class="line">  <span class="attribute">max-width</span>: <span class="variable">$siteWidth</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>LESS的变量</p>
<p>变量前面使用“@“字符开头</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@mainColor:</span> <span class="number">#963</span>;</div><div class="line"><span class="variable">@sitWidth:</span> <span class="number">1024px</span>;</div><div class="line"><span class="variable">@borderStyle:</span> dotted;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">@mainColor</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="variable">@borderStyle</span> <span class="variable">@mainColor</span>;</div><div class="line">  <span class="attribute">max-width</span>: <span class="variable">@siteWidth</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Stylus的变量</p>
<p>Stylus样式中声明变量没有限定，可以使用”$“符开始，结尾的（；）可有可无，但变量名和变量值之间的等号（=）是需要的。然而不能使用”@“符号开头来声明变量。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mainColor = #963;</div><div class="line">sitWidth = 1024px;</div><div class="line">$borderStyle = dotted;</div><div class="line">body&#123;</div><div class="line">  color @mainColor;</div><div class="line">  border 1px $borderStyle mainColor;</div><div class="line">  max-width siteWidth;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Stylus还有一个独特功能，不需要分配值给变量就可以定义应用属性：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">position absolute</div><div class="line">top 50%</div><div class="line">left 50%;</div><div class="line">width w = 150px;</div><div class="line">height h = 80px;</div><div class="line">margin-left -(w/2)</div><div class="line">margin-top -(h/2)</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="作用域（Scope）"><a href="#作用域（Scope）" class="headerlink" title="作用域（Scope）"></a>作用域（Scope）</h4><p>定义：顾名思义，Scope（指的是变量范围）即局部变量和全局变量的关系，查找变量的顺序是先在局部定义中找，如果找不到，则查找上级定义，直至全局。</p>
<p>目前Sass的作用域&amp;Less的作用域&amp;Stylus的作用域特性基本相同，都可以支持全局变量和局部变量，都会向上冒泡查找，直到根为止。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$color</span>: black;</div><div class="line"><span class="selector-class">.scoped</span>&#123;</div><div class="line">  <span class="variable">$bg</span>: blue;</div><div class="line">  <span class="variable">$color</span>: white;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="variable">$bg</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.unscoped</span>&#123;</div><div class="line">  <span class="attribute">color</span>:<span class="variable">$color</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.scoped</span> &#123;</div><div class="line">  <span class="attribute">color</span>: white;</div><div class="line">  <span class="attribute">background-color</span>: blue; &#125;</div><div class="line"></div><div class="line"><span class="selector-class">.unscoped</span> &#123;</div><div class="line">  <span class="attribute">color</span>: black; &#125;</div></pre></td></tr></table></figure>
<h4 id="混合（Mixins）"><a href="#混合（Mixins）" class="headerlink" title="混合（Mixins）"></a>混合（Mixins）</h4><p>Mixins是CSS预处理器语言中最强大的特性，即将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用。</p>
<ol>
<li><p>Sass的混合</p>
<p>Sass样式中声明Mixins是需要使用”@mixin“，然后后面紧跟Mixins的名称，也可以定义参数，同时可以给这个参数设置一个默认值，但参数名是使用”$“符号开始；</p>
<p>调用Mixins时，需要使用”@include“，然后后面紧跟要调用的Mixins名称。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 声明一个Mixin 名称为”error“ */</span></div><div class="line">@<span class="keyword">mixin</span> error(<span class="variable">$borderWidth</span>:<span class="number">2px</span>)&#123;</div><div class="line">  <span class="attribute">border</span>:<span class="variable">$borderWidth</span> solid <span class="number">#f00</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 调用 error Mixins */</span></div><div class="line"><span class="selector-class">.generic-error</span> &#123;</div><div class="line">  @<span class="keyword">include</span> error();</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.login-error</span>&#123;</div><div class="line">  @<span class="keyword">include</span> error(<span class="number">5px</span>);<span class="comment">/* 调用 error Mixins，并将参数$borderWidth的值重定义为5px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>LESS的混合</p>
<p>在LESS中，混合是指将定义好的”ClassA“引入另一个已经定义的”Class“，就像在当前的”Class“中增加一个属性。可以将Mixins看成是一个类选择器，当然Mixins也可以设置参数，并给参数设置默认值。且是以”@“开头。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 声明一个Mixin 名称为”error“ */</span></div><div class="line"><span class="selector-class">.error</span>(<span class="variable">@borderWidth</span>:<span class="number">2px</span>)&#123;</div><div class="line">  <span class="attribute">border</span>:<span class="variable">@borderWidth</span> solid <span class="number">#f00</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 调用 error Mixins */</span></div><div class="line"><span class="selector-class">.generic-error</span> &#123;</div><div class="line">  <span class="selector-class">.error</span>();</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.login-error</span>&#123;</div><div class="line">  <span class="selector-class">.error</span>(<span class="number">5px</span>);<span class="comment">/* 调用 error Mixins，并将参数$borderWidth的值重定义为5px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>Stylus的混合</p>
<p>Stylus中的混合和前两个CSS预处理器语言的混合略有不同，它可以不使用任何符号，就直接声明Mixins名，然后再定义参数和默认值之间用等号（=）来连接。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/* 声明一个Mixin 名称为”error“ */</div><div class="line">error(borderWidth = 2px)&#123;</div><div class="line">  border:borderWidth solid #f00;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div><div class="line">/* 调用 error Mixins */</div><div class="line">.generic-error &#123;</div><div class="line">  error();</div><div class="line">&#125;</div><div class="line">.login-error&#123;</div><div class="line">  error(5px);/* 调用 error Mixins，并将参数$borderWidth的值重定义为5px */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上三种Mixin编译后：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.generic-error</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#f00</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>; &#125;</div><div class="line"></div><div class="line"><span class="selector-class">.login-error</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f00</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>; &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="嵌套（Nesting）"><a href="#嵌套（Nesting）" class="headerlink" title="嵌套（Nesting）"></a>嵌套（Nesting）</h4><p>CSS预处理语言中嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而减少代码量，并增加代码的可读性。</p>
<p>例如，当多个元素有一个相同的父元素时，可以使用嵌套特性，在父元素的大括号（{}）里写这些元素，也可以使用”&amp;“符号来引用父选择器，以上三种CSS预处理器语言都是相同语法。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">section</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">  <span class="selector-tag">nav</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</div><div class="line">    <span class="selector-tag">a</span> &#123;</div><div class="line">      <span class="attribute">color</span>: <span class="number">#0982c1</span>;</div><div class="line">      <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">        <span class="attribute">text-decoration</span>: underline;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>CSS预处理器语言可以从一个选择器继承另一个选择器下的所有样式。</p>
<ol>
<li><p>Sass和Stylus的继承</p>
<p>Sass和Stylus的继承是把一个选择器的所有样式继承到另个选择器上，在继承另个选择器的样式时需要使用”@extend“开始，后面紧跟被继承的选择器。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.block</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  @<span class="keyword">extend</span> .block;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;</div><div class="line">  @<span class="keyword">extend</span> .block;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">  <span class="attribute">text-transform</span>: uppercase;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.block</span>, <span class="selector-tag">p</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>; &#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>; &#125;</div><div class="line"></div><div class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">  <span class="attribute">text-transform</span>: uppercase; &#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>LESS的继承</p>
<p>LESS支持的继承和Stylus不同，不是在选择器上继承，而是将Mixins中的样式嵌套到每个选择器里面。该方式的缺点就是在每个选择器中会有重复的样式产生。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.block</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line"> <span class="selector-class">.block</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;</div><div class="line">  <span class="selector-class">.block</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">  <span class="attribute">text-transform</span>: uppercase;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.block</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">  <span class="attribute">text-transform</span>: uppercase;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>CSS预处理器语言的运算符特性就是对数值型的Value进行加减乘除四则运算；</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@base_margin:</span> <span class="number">10px</span>;</div><div class="line"><span class="variable">@double_margin:</span> <span class="variable">@base_margin</span> * <span class="number">2</span>;</div><div class="line"><span class="variable">@full_page:</span> <span class="number">960px</span>;</div><div class="line"><span class="variable">@half_page:</span> <span class="variable">@full_page</span> / <span class="number">2</span>;</div><div class="line"><span class="variable">@quarter_page:</span> (<span class="variable">@full_page</span>/<span class="number">2</span>) / <span class="number">2</span>;</div></pre></td></tr></table></figure>
<p>而Sass在数字运算上要比LESS更专业，可以直接换算单位。Sass可以处理无法识别的度量单位，并将其输出。</p>
<p>Stylue的运算则是三者中最强大的一款，除了加减乘除，还有关系运算、逻辑运算等。</p>
<h4 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h4><p>颜色函数是CSS预处理语言中内置的颜色函数功能，这些功能可以对颜色进行处理，例如颜色的变亮、变暗、饱和度控制、色相控制，渐变色等处理。</p>
<ol>
<li><p>Sass颜色函数</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">lighten(<span class="variable">$color</span>, 10%); <span class="comment">/* 返回的颜色在$color基础上变亮10% */</span></div><div class="line">darken(<span class="variable">$color</span>, 10%);  <span class="comment">/* 返回的颜色在$color基础上变暗10% */</span></div><div class="line">saturate(<span class="variable">$color</span>, 10%); <span class="comment">/* 返回的颜色在$color基础上饱和度增加10% */</span></div><div class="line">desaturate(<span class="variable">$color</span>, 10%); <span class="comment">/* 返回的颜色在$color基础上饱和度减少10% */</span></div><div class="line">grayscale(<span class="variable">$color</span>); <span class="comment">/* 返回$color的灰度色 */</span></div><div class="line">complement(<span class="variable">$color</span>); <span class="comment">/* 返回$color的补色 */</span></div><div class="line">invert(<span class="variable">$color</span>); <span class="comment">/* 返回$color的反向色 */</span></div><div class="line">mix(<span class="variable">$color1</span>,<span class="variable">$color2</span>,50%); <span class="comment">/* 返回$color1和$color2的50%混合色 */</span></div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$color</span>: <span class="number">#369</span>;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line"><span class="attribute">background</span>: darken(<span class="variable">$color</span>, <span class="number">10%</span>);</div><div class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid lighten(<span class="variable">$color</span>,<span class="number">10%</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>LESS颜色函数</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">lighten</span>(<span class="variable">@color</span>, <span class="number">10%</span>); <span class="comment">/* 返回的颜色在@color基础上变亮10% */</span></div><div class="line"><span class="selector-tag">darken</span>(<span class="variable">@color</span>, <span class="number">10%</span>);  <span class="comment">/* 返回的颜色在@color基础上变暗10% */</span></div><div class="line"><span class="selector-tag">saturate</span>(<span class="variable">@color</span>, <span class="number">10%</span>); <span class="comment">/* 返回的颜色在@color基础上饱和度增加10% */</span></div><div class="line"><span class="selector-tag">desaturate</span>(<span class="variable">@color</span>, <span class="number">10%</span>); <span class="comment">/* 返回的颜色在@color基础上饱和度减少10% */</span></div><div class="line"><span class="selector-tag">spin</span>(<span class="variable">@color</span>,<span class="number">10</span>);<span class="comment">/* 返回的颜色在@color基础上色调增加10 */</span></div><div class="line"><span class="selector-tag">spin</span>(<span class="variable">@color</span>,-<span class="number">10</span>); <span class="comment">/* 返回的颜色在@color基础上色调减少10 */</span></div><div class="line"><span class="selector-tag">mix</span>(<span class="variable">@color1</span>,<span class="variable">@color2</span>); <span class="comment">/* 返回@color1和@color2两者的混合色 */</span></div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@color:</span> <span class="number">#369</span>;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line"><span class="attribute">background</span>: <span class="variable">@color</span>;</div><div class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid lighten(<span class="variable">@color</span>,<span class="number">10%</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>Stylus颜色函数</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">lighten</span>(color, <span class="number">10%</span>); <span class="comment">/* 返回的颜色在color基础上变亮10% */</span></div><div class="line"><span class="selector-tag">darken</span>(color, <span class="number">10%</span>);  <span class="comment">/* 返回的颜色在color基础上变暗10% */</span></div><div class="line"><span class="selector-tag">saturate</span>(color, <span class="number">10%</span>); <span class="comment">/* 返回的颜色在color基础上饱和度增加10% */</span></div><div class="line"><span class="selector-tag">desaturate</span>(color, <span class="number">10%</span>); <span class="comment">/* 返回的颜色在color基础上饱和度减少10% */</span></div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">color = #0982C1</div><div class="line">h1</div><div class="line">  background color</div><div class="line">  border 3px solid darken(color,50%)</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="导入（Import）"><a href="#导入（Import）" class="headerlink" title="导入（Import）"></a>导入（Import）</h4><p>在CSS中，不怎么用@import来导入样式，因为这样做会增加http的请求。但是在CSS预处理器中的导入规则与CSS不同，它仅仅在语义上导入不同的文件，最终生成的还是一个CSS文件。</p>
<blockquote>
<p>注意： 导入文件中定义了变量，混合信息也会被引入到主样式文件中，因此要避免他们相互冲突。</p>
</blockquote>
<p>Sass 、 LESS 和 Stylus 的导入样式的方法都是一样的</p>
<p>如下所示：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"defaultStyle/main.scss"</span>;</div></pre></td></tr></table></figure>
<h4 id="注释（Comment）"><a href="#注释（Comment）" class="headerlink" title="注释（Comment）"></a>注释（Comment）</h4><p>以上三种预处理语言都支持多行注释及单行注释</p>
<ol>
<li><p>多行注释</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *我是注释</div><div class="line">*/</div><div class="line"><span class="selector-tag">body</span></div><div class="line">  <span class="selector-tag">padding</span> <span class="selector-tag">5px</span></div></pre></td></tr></table></figure>
</li>
<li><p>单行注释</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//我是注释</span></div><div class="line"><span class="variable">@mainColor</span>：<span class="number">#369</span>;<span class="comment">//定义主体颜色</span></div></pre></td></tr></table></figure>
</li>
<li><p>Stylus特殊的多行注释——多行缓冲注释。这种注释跟多行注释类似，不同之处在于始的时候，这里是”/*！”。这个相当于告诉Stylus压缩的时候这段无视直接输出。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*!</span></div><div class="line">*给定数值合体</div><div class="line">*/</div><div class="line"><span class="selector-tag">add</span>(a, b)</div><div class="line">  <span class="selector-tag">a</span> + <span class="selector-tag">b</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h3><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><ol>
<li><p>Sass的条件语句</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  @<span class="keyword">if</span> 1 + 1 == 2 &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid;  &#125;</div><div class="line">  @<span class="keyword">if</span> 5 &lt; 3      &#123; <span class="attribute">border</span>: <span class="number">2px</span> dotted; &#125;</div><div class="line">  @<span class="keyword">if</span> null       &#123; <span class="attribute">border</span>: <span class="number">3px</span> double; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:green;&#125;</div></pre></td></tr></table></figure>
<p>也可以和<code>@else if</code>  或<code>@else</code>一起使用</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$type</span>: monster;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  @<span class="keyword">if</span> <span class="variable">$type</span> == ocean &#123;</div><div class="line">    <span class="attribute">color</span>: blue;</div><div class="line">  &#125; @<span class="keyword">else</span> if <span class="variable">$type</span> == matador &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">  &#125; @<span class="keyword">else</span> if <span class="variable">$type</span> == monster &#123;</div><div class="line">    <span class="attribute">color</span>: green;</div><div class="line">  &#125; @<span class="keyword">else</span> &#123;</div><div class="line">    <span class="attribute">color</span>: black;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Stylus 的条件语句</p>
<p>Stylus的条件语句的使用和使用其他编程条件语句使用基本类似，不同的是它可以在样式中省略大括号{}</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">box</span>(x,y,margin = false)</div><div class="line">	<span class="selector-tag">padding</span> <span class="selector-tag">y</span> <span class="selector-tag">x</span></div><div class="line">	<span class="selector-tag">if</span> <span class="selector-tag">margin</span></div><div class="line">		<span class="selector-tag">margin</span> <span class="selector-tag">y</span> <span class="selector-tag">x</span></div><div class="line">	<span class="selector-tag">else</span></div><div class="line">		<span class="selector-tag">margin</span> <span class="selector-tag">0</span></div><div class="line"><span class="selector-tag">body</span></div><div class="line">	<span class="selector-tag">box</span>(<span class="number">5px</span>,<span class="number">10px</span>,true)</div></pre></td></tr></table></figure>
<p>Stylus还支持后缀条件语句。使用<code>if</code>和<code>unless</code>作为操作符，当右边表达式为真时执行左边的操作对象</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">negative(n)</div><div class="line">  <span class="keyword">unless</span> n is a <span class="string">'unit'</span></div><div class="line">  	error(<span class="string">'无效数值'</span>)</div><div class="line">  <span class="keyword">if</span> n &lt; <span class="number">0</span></div><div class="line">  	yes</div><div class="line">  <span class="keyword">else</span></div><div class="line">   	no</div></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">negative(n)</div><div class="line">	error(<span class="string">'无效数值'</span>) <span class="keyword">unless</span> n is a <span class="string">'unit'</span></div><div class="line">	<span class="keyword">return</span> yes <span class="keyword">if</span> n &lt; <span class="number">0</span></div><div class="line">	no</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>LESS的条件语句</p>
<p>LESS的条件使用关键字“when”</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mixin</span>(<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &gt;= <span class="number">10</span>) &#123;</div><div class="line">  <span class="attribute">background-color</span>: black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mixin</span>(<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &lt; <span class="number">10</span>) &#123;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class1</span> &#123; <span class="selector-class">.mixin</span>(<span class="number">12</span>) &#125;</div><div class="line"><span class="selector-class">.class2</span> &#123; <span class="selector-class">.mixin</span>(<span class="number">6</span>) &#125;</div></pre></td></tr></table></figure>
<p>转义出来的CSS：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class1</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了<code>when</code>、<code>&gt;、&lt;、=、&lt;=、&gt;=</code>，LESS还提供了很多类型检查函数来辅助条件表达式，例如<code>iscolor</code>、<code>isnumber</code>、<code>isstring</code>、<code>iskeyword</code>、<code>isurl</code>等。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (iscolor(<span class="variable">@a</span>)) &#123;</div><div class="line">  <span class="attribute">background-color</span>: black;</div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (isnumber(<span class="variable">@a</span>)) &#123;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.class1</span> &#123; <span class="selector-class">.mixin</span>(red) &#125;</div><div class="line"> <span class="selector-class">.class2</span> &#123; <span class="selector-class">.mixin</span>(<span class="number">6</span>) &#125;</div></pre></td></tr></table></figure>
<p>此外，LESS还支持AND、OR以及NOT来组合条件表达式，而OR在LESS中并不是使用OR关键字，而是用“,”来表示OR的逻辑关系。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.smaller</span> (<span class="variable">@a</span>, <span class="variable">@b</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &gt; <span class="variable">@b</span>) &#123;</div><div class="line">  <span class="attribute">background-color</span>: black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.math</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &gt; <span class="number">10</span>) <span class="keyword">and</span> (<span class="variable">@a</span> &lt; <span class="number">20</span>) &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.math</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &lt; <span class="number">10</span>)，(<span class="variable">@a</span> &gt; <span class="number">20</span>) &#123;</div><div class="line">  <span class="attribute">background-color</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.math</span> (<span class="variable">@a</span>) <span class="keyword">when</span> <span class="keyword">not</span> (<span class="variable">@a</span> = <span class="number">10</span>)  &#123;</div><div class="line">  <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.math</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> = <span class="number">10</span>)  &#123;</div><div class="line">  <span class="attribute">background-color</span>: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.testSmall</span> &#123;<span class="selector-class">.smaller</span>(<span class="number">30</span>, <span class="number">10</span>) &#125;</div><div class="line"><span class="selector-class">.testMath1</span> &#123;<span class="selector-class">.math</span>(<span class="number">15</span>)&#125;</div><div class="line"><span class="selector-class">.testMath2</span> &#123;<span class="selector-class">.math</span>(<span class="number">7</span>)&#125;</div><div class="line"><span class="selector-class">.testMath3</span> &#123;<span class="selector-class">.math</span>(<span class="number">10</span>)&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><ol>
<li><p>Sass的循环语句</p>
<ul>
<li><code>@for</code>语法——Sass中使用for循环需要使用<code>@for</code>,并且配合<code>from</code>和<code>through</code>一起使用，语法如下：</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$var</span> from &lt;start&gt; through &lt;end&gt; &#123;语句块&#125;</div></pre></td></tr></table></figure>
<p>​    例如：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 3 &#123;</div><div class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    转义后：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item-1</span> &#123;  <span class="attribute">width</span>: <span class="number">2em</span>; &#125;</div><div class="line"><span class="selector-class">.item-2</span> &#123;  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</div><div class="line"><span class="selector-class">.item-3</span> &#123;  <span class="attribute">width</span>: <span class="number">6em</span>; &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>@each</code>语法：</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">each</span> <span class="variable">$var</span> in &lt;list&gt;&#123;语句块&#125;</div></pre></td></tr></table></figure>
<p>​    例如：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">each</span> <span class="variable">$animal</span> in puma,sea-slug,egret,salamander &#123;</div><div class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    转义出来：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.puma-icon</span> &#123;  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/puma.png'</span>); &#125;</div><div class="line"><span class="selector-class">.sea-slug-icon</span> &#123;  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/sea-slug.png'</span>); &#125;</div><div class="line"><span class="selector-class">.egret-icon</span> &#123;  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/egret.png'</span>); &#125;</div><div class="line"><span class="selector-class">.salamander-icon</span> &#123;  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/salamander.png'</span>)	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>@while</code>语法:</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$i</span>: <span class="number">6</span>;</div><div class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</div><div class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;<span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;&#125;</div><div class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转义：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item-6</span> &#123;  <span class="attribute">width</span>: <span class="number">12em</span>; &#125;</div><div class="line"><span class="selector-class">.item-4</span> &#123;  <span class="attribute">width</span>: <span class="number">8em</span>; &#125;</div><div class="line"><span class="selector-class">.item-2</span> &#123;  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>Stylus的循环语句</p>
<p>使用for/in表达式进行循环</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for &lt;val-name&gt;<span class="selector-attr">[,&lt;key-name&gt;]</span> in &lt;expression&gt;</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span></div><div class="line">	for num in 1 2 3</div><div class="line">		foo num</div></pre></td></tr></table></figure>
<p>转义后：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">foo</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">foo</span>: <span class="number">2</span>;</div><div class="line">  <span class="attribute">foo</span>: <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>key-name</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">	fonts = Impact Arial sans-serif</div><div class="line">	for font, i in fonts</div><div class="line">		foo i font</div></pre></td></tr></table></figure>
<p>转义后：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">foo </span>: <span class="number">0</span> Impact;</div><div class="line">  <span class="attribute">foo </span>: <span class="number">1</span> Arial;</div><div class="line">  <span class="attribute">foo </span>: <span class="number">2</span> sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>LESS的循环语句</p>
<p>在LESS语言中并没有现在的循环语句，可是像条件语句一样，通过when来模拟出循环功能。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.loopingClass</span> (<span class="variable">@index</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &gt; <span class="number">0</span>)&#123;</div><div class="line">  <span class="selector-class">.myclass</span> &#123;</div><div class="line">    <span class="attribute">z-index </span>: <span class="variable">@index</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 递归</span></div><div class="line">  <span class="selector-class">.loopingClass</span>(<span class="variable">@index</span> - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 停止循环</span></div><div class="line"><span class="selector-class">.loopingClass</span>(<span class="number">0</span>)&#123;&#125;</div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="selector-class">.loopingClass</span>(<span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>转义后：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.myclass</span> &#123;<span class="attribute">z-index</span>: <span class="number">3</span>;&#125;</div><div class="line"><span class="selector-class">.myclass</span> &#123;<span class="attribute">z-index</span>: <span class="number">2</span>;&#125;</div><div class="line"><span class="selector-class">.myclass</span> &#123;<span class="attribute">z-index</span>: <span class="number">1</span>;&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h3 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a>对比总结</h3><ul>
<li>三者都是开源项目；</li>
<li>Sass诞生是最早也是最成熟的CSS预处理器，有Ruby社区和Compass支持；Stylus早期服务器Node JS项目，在该社区得到一定支持者；LESS出现于2009年，支持者远超于Ruby和Node JS社区；</li>
<li>Sass和LESS语法较为严谨、严密，而Stylus语法相对散漫，其中LESS学习起来更快一些，因为他更像CSS的标准；</li>
<li>Sass和LESS相互影响较大，其中Sass受LESS影响，已经进化到了全面兼容CSS的SCSS；</li>
<li>Sass和LESS都有第三方工具提供转译，特别是Sass和Compass是绝配；</li>
<li>Sass、LESS和Stylus都具有变量、作用域、混合、嵌套、继承、运算符、颜色函数、导入和注释等基本特性，而且以“变量”、“混合”、“嵌套”、“继承”和“颜色函数”称为五大基本特性，各自特性实现功能基本相似，只是使用规则上有所不同；</li>
<li>Sass和Stylus具有类似于语言处理的能力，比如说条件语句、循环语句等，而LESS需要通过When等关键词模拟这些功能，在这一方面略逊一层；</li>
</ul>
<blockquote>
<p> 原文参考：<a href="http://www.w3cplus.com/css/css-preprocessor-sass-vs-less-stylus-2.html" target="_blank" rel="external">http://www.w3cplus.com/css/css-preprocessor-sass-vs-less-stylus-2.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是博主在学习CSS预处理语言时，通过参考文档学习并对比了Sass、LESS、Stylus三者预处理语言，并对它们的背景、特性及使用方法进行了解和学习。希望给大家有所参考。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="预处理语言" scheme="http://yoursite.com/tags/%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Sass" scheme="http://yoursite.com/tags/Sass/"/>
    
      <category term="LESS" scheme="http://yoursite.com/tags/LESS/"/>
    
      <category term="Stylus" scheme="http://yoursite.com/tags/Stylus/"/>
    
  </entry>
  
  <entry>
    <title>D3.js学习笔记</title>
    <link href="http://yoursite.com/2017/08/14/D3.js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/08/14/D3.js学习笔记/</id>
    <published>2017-08-14T02:18:29.000Z</published>
    <updated>2017-10-16T08:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文的内容是博主在学习D3.js时在配合查阅资料及官方文档所积累的使用D3基本方式与方法。</p>
<a id="more"></a>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p>D3全称（Data-Driven Documents）：被数据驱动的文档，实际是一个JavaScript的函数库。</p>
</li>
<li><p>选择集：d3.select()或d3.selectAll()选择元素后返回对象</p>
</li>
<li><p>链式语法：D3可以连续不断地调用函数，形如：d3.select().selectAll().text()…</p>
<p>​</p>
</li>
</ul>
<h4 id="选择元素和绑定数据"><a href="#选择元素和绑定数据" class="headerlink" title="选择元素和绑定数据"></a>选择元素和绑定数据</h4><ul>
<li><p>在D3中，用于选择元素的函数有两个：</p>
<ul>
<li>d3.select（）：是选择所有指定元素的第一个；</li>
<li>d3.selectAll（）： 是选择指定元素的全部；</li>
</ul>
<p>返回的结果称为<strong>选择集</strong></p>
</li>
<li><p>D3中，绑定数据的函数有如下两个：</p>
<ul>
<li>datum（）：绑定一个数据到选择集上；</li>
<li>data（）：绑定一个数组到选择集上，数组的各项值分别于选择集的各元素绑定</li>
</ul>
</li>
</ul>
<h4 id="选择、插入、删除元素"><a href="#选择、插入、删除元素" class="headerlink" title="选择、插入、删除元素"></a>选择、插入、删除元素</h4><ul>
<li><p>选择元素</p>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"myClass"</span> <span class="attr">id</span>=<span class="string">"second"</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"myClass"</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>选择第一个p元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = d3.select(<span class="string">"body"</span>).select(<span class="string">"p"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>选择三个p元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p2 = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>选择第二个p元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p3 = d3.select(<span class="string">"body"</span>).select(<span class="string">"#second"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>选择后两个p元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p4 = d3.select(<span class="string">"body"</span>).select(<span class="string">".myClass"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>插入元素</p>
<ul>
<li><p>append（）：在选择集末尾插入元素；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在body的末尾添加一个p元素</span></div><div class="line">body.append(<span class="string">"p"</span>).text(<span class="string">"append a p element"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>insert（）：在选择集前面插入元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在body中id为second的元素前添加一个段落元素</span></div><div class="line">body.insert(<span class="string">"p"</span>,<span class="string">"#second"</span>).text(<span class="string">"insert a p element"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除元素</p>
<p>删除一个元素时，对于选择的元素，使用remove方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = body.select(<span class="string">"#second"</span>);</div><div class="line">p.remove();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="绘制图表"><a href="#绘制图表" class="headerlink" title="绘制图表"></a>绘制图表</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>HTML5提供两种强有力的“画布”：SVG和Canvas</p>
<ul>
<li>SVG（Scalable Vector Graphics）：可缩放矢量图形，用于描述二维矢量图形的一种图形格式，是由万维网联盟制定的开放标准。SVG使用XML格式来定义图形，除了IE8之前的版本外，绝大部分浏览器都支持SVG，可将SVG文本直接嵌入HTML中显示。SVG有如下特点：<ul>
<li>SVG绘制的是矢量图，因此对图像进行放大不会失真；</li>
<li>基于XML，可以为每个元素添加JavaScript事件处理器；</li>
<li>每个图形均视为对象，更改对象的属性，图形也会改变；</li>
<li>不适合游戏应用。</li>
</ul>
</li>
<li>Canvas：是通过JavaScript来绘制2D图形，是HTML5中新增的元素，它有如下特点：<ul>
<li>绘制的是位图，图像放大后会失真；</li>
<li>不支持事件处理器；</li>
<li>能够以.png或.jpg格式保存图像；</li>
<li>适合游戏应用</li>
</ul>
</li>
</ul>
<h4 id="SVG画布的预定义元素"><a href="#SVG画布的预定义元素" class="headerlink" title="SVG画布的预定义元素"></a>SVG画布的预定义元素</h4><ul>
<li>六种基本图形：<ul>
<li>矩形</li>
<li>圆形</li>
<li>椭圆</li>
<li>线段</li>
<li>折现</li>
<li>多边形</li>
</ul>
</li>
<li>一种特殊图形<ul>
<li>路径</li>
</ul>
</li>
</ul>
<h4 id="绘制方法"><a href="#绘制方法" class="headerlink" title="绘制方法"></a>绘制方法</h4><ul>
<li><p>添加画布</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> width =<span class="number">300</span>;</div><div class="line"><span class="keyword">var</span> height = <span class="number">300</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>).attr(<span class="string">"width"</span>,width).attr(<span class="string">"height"</span>,height);</div></pre></td></tr></table></figure>
</li>
<li><p>绘制矩形</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">rect</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">rect</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p>rect的属性有：</p>
<ul>
<li><p>x ：矩形左上角的x坐标</p>
</li>
<li><p>y ：矩形左上角的y坐标</p>
</li>
<li><p>width：矩形的宽度</p>
</li>
<li><p>height：矩形的高度</p>
<p>（在SVG中，x轴正方向是水平向右，y轴的正方向是垂直向下）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> width =<span class="number">300</span>;</div><div class="line"><span class="keyword">var</span> height = <span class="number">300</span>;</div><div class="line"><span class="keyword">var</span> rectHeight = <span class="number">25</span>;</div><div class="line"><span class="keyword">var</span> dataset = [<span class="number">250</span>,<span class="number">210</span>,<span class="number">170</span>,<span class="number">130</span>,<span class="number">90</span>,<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="keyword">var</span> svg = body.append(<span class="string">"svg"</span>).attr(<span class="string">"width"</span>,width).attr(<span class="string">"height"</span>,height);</div><div class="line">svg.selectAll(<span class="string">"rect"</span>) <span class="comment">//选择svg内所有的矩形</span></div><div class="line">.data(dataset)        <span class="comment">//绑定数组</span></div><div class="line">.enter()              <span class="comment">//指定选择集的enter部分</span></div><div class="line">.append(<span class="string">"rect"</span>)       <span class="comment">//添加足够数量的矩形元素</span></div><div class="line">.attr(<span class="string">"x"</span>,<span class="number">20</span>)</div><div class="line">.attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> i * rectHeight;</div><div class="line">&#125;)</div><div class="line">.attr(<span class="string">"width"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> d;</div><div class="line">&#125;</div><div class="line">.attr(<span class="string">"height"</span>,rectHeight<span class="number">-2</span>)</div><div class="line">.attr(<span class="string">"fill"</span>,<span class="string">"steelblue"</span>);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
</li>
</ul>
<h3 id="比例尺"><a href="#比例尺" class="headerlink" title="比例尺"></a>比例尺</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p>定义：将某一区域的值映射到另一区域，其大小关系不变——称为比例尺（Scale）。类似于数学中的一元二次函数，有x和y两个未知数，当x的值确定时，y的值也就确定了。在数学中，x的范围被称为<strong>定义域</strong>，y的范围被称为<strong>值域</strong>。D3中的比例尺，分别称为domain和range。</p>
</li>
<li><p>种类（最常用的有以下两种）</p>
<ul>
<li><p>线性比例尺 ——能将一个连续的区间，映射到另一区间。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">0.9</span>, <span class="number">1.5</span>, <span class="number">3.3</span>];</div><div class="line"><span class="keyword">var</span> min = d3.min(dataset);</div><div class="line"><span class="keyword">var</span> max = d3.max(dataset);</div><div class="line"></div><div class="line"><span class="keyword">var</span> linear = d3.scale.linear()</div><div class="line">        .domain([min, max])</div><div class="line">        .range([<span class="number">0</span>, <span class="number">300</span>]);</div><div class="line"></div><div class="line">linear(<span class="number">0.9</span>);    <span class="comment">//返回 0</span></div><div class="line">linear(<span class="number">2.3</span>);    <span class="comment">//返回 175</span></div><div class="line">linear(<span class="number">3.3</span>);    <span class="comment">//返回 300</span></div></pre></td></tr></table></figure>
<p>其中，d3.scale.linear()返回一个线性比例尺，可以当做<strong>函数</strong>来使用。domain（）和range（）分别设定比例尺的定义域和值域。</p>
</li>
<li><p>序数比例尺——有些定义域和值域是离散的，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> index = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> color = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> ordinal = d3.scale.ordinal()</div><div class="line">			.domain(index)</div><div class="line">			.range(color);</div><div class="line"></div><div class="line">ordinal(<span class="number">0</span>); <span class="comment">//返回 red</span></div><div class="line">ordinal(<span class="number">2</span>); <span class="comment">//返回 green</span></div><div class="line">ordinal(<span class="number">4</span>); <span class="comment">//返回 black</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> linear = d3.scale.linear()</div><div class="line">	.domain([d3.min(dataset),d3.max(dataset)])</div><div class="line">	.range([<span class="number">0</span>,<span class="number">250</span>]);</div><div class="line"></div><div class="line">	svg.selectAll(<span class="string">"rect"</span>)</div><div class="line">	.data(dataset)</div><div class="line">	.enter()</div><div class="line">	.append(<span class="string">"rect"</span>)</div><div class="line">	.attr(<span class="string">"x"</span>,<span class="number">20</span>)</div><div class="line">	.attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> i * rectHeight;</div><div class="line">	&#125;)</div><div class="line">	.attr(<span class="string">"width"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> linear(d);  <span class="comment">//在这里用比例尺</span></div><div class="line">	&#125;)</div><div class="line">	.attr(<span class="string">"height"</span>,rectHeight<span class="number">-2</span>)</div><div class="line">	.attr(<span class="string">"fill"</span>,<span class="string">"steelblue"</span>);</div></pre></td></tr></table></figure>
<h3 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h3><h4 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>定义：是可视化图表中经常出现的一种图形，由一些线段和刻度组成。坐标轴在SVG中没有现成的图形元素，需要用其他的元素组合构成。D3提供了坐标的组件，如此在SVG画布中绘制坐标轴变得像添加一个普通元素一样简单。</li>
</ul>
<h4 id="定义坐标轴"><a href="#定义坐标轴" class="headerlink" title="定义坐标轴"></a>定义坐标轴</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数据</span></div><div class="line"><span class="keyword">var</span> dataset = [ <span class="number">2.5</span> , <span class="number">2.1</span> , <span class="number">1.7</span> , <span class="number">1.3</span> , <span class="number">0.9</span> ];</div><div class="line"><span class="comment">//定义比例尺</span></div><div class="line"><span class="keyword">var</span> linear = d3.scale.linear()</div><div class="line">      .domain([<span class="number">0</span>, d3.max(dataset)])</div><div class="line">      .range([<span class="number">0</span>, <span class="number">250</span>]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> axis = d3.svg.axis()</div><div class="line">     .scale(linear)      <span class="comment">//指定比例尺</span></div><div class="line">     .orient(<span class="string">"bottom"</span>)   <span class="comment">//指定刻度的方向</span></div><div class="line">     .ticks(<span class="number">7</span>);          <span class="comment">//指定刻度的数量</span></div></pre></td></tr></table></figure>
<h4 id="在SVG中添加坐标轴"><a href="#在SVG中添加坐标轴" class="headerlink" title="在SVG中添加坐标轴"></a>在SVG中添加坐标轴</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svg.append(<span class="string">"g"</span>).call(axis); <span class="xml"><span class="tag">&lt;<span class="name">====</span>&gt;</span> axis(svg.append("g"))</span></div></pre></td></tr></table></figure>
<p>call（）的参数是一个函数，调用之后，将当前的选择集作为参数传递给此参数。</p>
<h4 id="设定坐标轴的样式和位置"><a href="#设定坐标轴的样式和位置" class="headerlink" title="设定坐标轴的样式和位置"></a>设定坐标轴的样式和位置</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.axis</span> <span class="selector-tag">path</span>,</div><div class="line">	<span class="selector-class">.axis</span> <span class="selector-tag">line</span>&#123;</div><div class="line">		<span class="attribute">fill</span>:none;</div><div class="line">		<span class="attribute">stroke</span>:black;</div><div class="line">		<span class="attribute">shape-rendering</span>:crisoEdges;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-class">.axis</span> <span class="selector-tag">text</span>&#123;</div><div class="line">		<span class="attribute">font-family</span>: sans-serif;</div><div class="line">		<span class="attribute">font-size</span>: <span class="number">11px</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">javascript</span>&gt;</span></div><div class="line">svg.append("g")</div><div class="line">	.attr("class","axis")</div><div class="line">	.attr("transform","translate(20,130)")</div><div class="line">	.call(axis);</div><div class="line"><span class="tag">&lt;/<span class="name">javascript</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="动态图表"><a href="#动态图表" class="headerlink" title="动态图表"></a>动态图表</h3><h4 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p>动态效果——<strong>动态</strong>的图标是指图表在某一时间段会发生某种变化，可能是形状、颜色、位置等，而且是用户可以看到变化的过程的。在D3中称之为<strong>过渡（transition）</strong></p>
<p>​</p>
</li>
</ul>
<h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><ul>
<li><p>transition（）—— 启动过渡效果，其前后是图形变化前后的状态（形状、位置、颜色等）。如下面例子所示：D3 会自动对两种颜色（红色和铁蓝色）之间的颜色值（RGB值）进行插值计算，得到过渡用的颜色值。我们无需知道中间是怎么计算的，只需要享受结果即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.attr(<span class="string">"fill"</span>,<span class="string">"red"</span>)         <span class="comment">//初始颜色为红色</span></div><div class="line">.transition()               <span class="comment">//启动过渡</span></div><div class="line">.attr(<span class="string">"fill"</span>,<span class="string">"steelblue"</span>)   <span class="comment">//终止颜色为铁蓝色</span></div></pre></td></tr></table></figure>
</li>
<li><p>duration（）—— 指定过渡的持续时间，单位为毫秒。</p>
</li>
<li><p>ease（）—— 指定过渡的方式，调用方式：ease（”bounce”）常用的有：</p>
<ul>
<li>linear：普通的线性变化；</li>
<li>circle：慢慢地到达变换的最终状态；</li>
<li>elastic：带有弹跳地到达最终状态；</li>
<li>bounce：在最终状态处弹跳几次。</li>
</ul>
</li>
<li><p>delay（）——指定延迟的时间，表示一定时间后才开始转变，单位同样为毫秒。此函数可以对整体指定延迟，也可以对个别指定延迟。</p>
<ul>
<li><p>对整体指定：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.transition()</div><div class="line">.duration(<span class="number">1000</span>)</div><div class="line">.delay(<span class="number">500</span>)</div><div class="line"><span class="comment">//如此，图形整体在延迟 500 毫秒后发生变化，变化的时长为 1000 毫秒。因此，过渡的总时长为1500毫秒。</span></div></pre></td></tr></table></figure>
</li>
<li><p>一个一个图形指定：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.transition()</div><div class="line">.duration(<span class="number">1000</span>)</div><div class="line">.delay(funtion(d,i)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">200</span>*i;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//如此，假设有 10 个元素，那么第 1 个元素延迟 0 毫秒（因为 i = 0），第 2 个元素延迟 200 毫秒，第 3 个延迟 400 毫秒，依次类推….整个过渡的长度为 200 * 9 + 1000 = 2800 毫秒。</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
</li>
</ul>
<h3 id="数据绑定后三种处理方法"><a href="#数据绑定后三种处理方法" class="headerlink" title="数据绑定后三种处理方法"></a>数据绑定后三种处理方法</h3><h4 id="理解update、enter与exit"><a href="#理解update、enter与exit" class="headerlink" title="理解update、enter与exit"></a>理解update、enter与exit</h4><ul>
<li>概念：上述方法一般用来处理的是当选择集和数据的数量关系不确定的情况。</li>
<li>关系：如果数组为 [3, 6, 9, 12, 15]，将此数组绑定到三个 p 元素的选择集上。可以想象，会有两个数据没有元素与之对应，这时候 D3 会建立两个空的元素与数据对应，这一部分就称为 <strong>Enter</strong>。而有元素与数据对应的部分称为 <strong>Update</strong>。如果数组为 [3]，则会有两个元素没有数据绑定，那么没有数据绑定的部分被称为 <strong>Exit</strong>。示意图如下所示</li>
</ul>
<p><img src="./update-exit-enter.png" alt="update-exit-enter"></p>
<h4 id="Update与Enter的使用"><a href="#Update与Enter的使用" class="headerlink" title="Update与Enter的使用"></a>Update与Enter的使用</h4><ul>
<li><p>场景：当对应的元素不足时 （ 绑定数据数量 &gt; 对应元素 ），需要添加元素（append）。</p>
<p>现在 body 中有三个 p 元素，要绑定一个长度大于 3 的数组到 p 的选择集上，然后分别处理 update 和 enter 两部分。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [ <span class="number">3</span> , <span class="number">6</span> , <span class="number">9</span> , <span class="number">12</span> , <span class="number">15</span> ];</div><div class="line"></div><div class="line"><span class="comment">//选择body中的p元素</span></div><div class="line"><span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</div><div class="line"></div><div class="line"><span class="comment">//获取update部分</span></div><div class="line"><span class="keyword">var</span> update = p.data(dataset);</div><div class="line"></div><div class="line"><span class="comment">//获取enter部分</span></div><div class="line"><span class="keyword">var</span> enter = update.enter();</div><div class="line"></div><div class="line"><span class="comment">//update部分的处理：更新属性值</span></div><div class="line">update.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"update "</span> + d;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//enter部分的处理：添加元素后赋予属性值</span></div><div class="line">enter.append(<span class="string">"p"</span>)</div><div class="line">    .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"enter "</span> + d;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>update 部分的处理办法一般是：更新属性值</li>
<li>enter 部分的处理办法一般是：添加元素后，赋予属性值</li>
<li>exit 部分的绝大部分操作是删除</li>
</ul>
</li>
</ul>
<h4 id="Update与Exit的使用"><a href="#Update与Exit的使用" class="headerlink" title="Update与Exit的使用"></a>Update与Exit的使用</h4><ul>
<li><p>场景：当对应的元素过多时 （ 绑定数据数量 &lt; 对应元素 ），需要删掉多余的元素。</p>
<p>现在 body 中有三个 p 元素，要绑定一个长度小于 3 的数组到 p 的选择集上，然后分别处理 update 和 exit 两部分。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [ <span class="number">3</span> ];</div><div class="line"></div><div class="line"><span class="comment">//选择body中的p元素</span></div><div class="line"><span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</div><div class="line"></div><div class="line"><span class="comment">//获取update部分</span></div><div class="line"><span class="keyword">var</span> update = p.data(dataset);</div><div class="line"></div><div class="line"><span class="comment">//获取exit部分</span></div><div class="line"><span class="keyword">var</span> exit = update.exit();</div><div class="line"></div><div class="line"><span class="comment">//update部分的处理：更新属性值</span></div><div class="line">update.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"update "</span> + d;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//exit部分的处理：修改p元素的属性</span></div><div class="line">exit.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"exit"</span>;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="comment">//exit部分的处理通常是删除元素</span></div><div class="line"><span class="comment">// exit.remove();</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h3 id="交互操作"><a href="#交互操作" class="headerlink" title="交互操作"></a>交互操作</h3><h4 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>定义：交互指的是用户输入了某种指令，程序接受到指令之后必须做出某种响应。对可视化图表来说，交互能使图表更加生动，能表现更多内容。例如，拖动图表中某些图形、鼠标滑到图形上出现提示框，用触屏放大或缩小图形等。</li>
<li>交互的工具：鼠标、键盘、触屏</li>
</ul>
<h4 id="添加交互"><a href="#添加交互" class="headerlink" title="添加交互"></a>添加交互</h4><ul>
<li><p>方法：在D3中，每一个选择集都有on（）函数，用于添加事件监听器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> circle = svg.append(<span class="string">"circle"</span>);</div><div class="line"></div><div class="line">circle.on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//交互内容</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>参数：on（）的第一个参数是监听的事件，第二个参数是监听到事件后响应的内容，且为一个函数</p>
</li>
<li><p>鼠标常用的事件：</p>
<ul>
<li>click：鼠标单击某元素时，相当于 mousedown 和 mouseup 组合在一起。</li>
<li>mouseover：光标放在某元素上。</li>
<li>mouseout：光标从某元素上移出来时。</li>
<li>mousemove：鼠标被移动的时候。</li>
<li>mousedown：鼠标按钮被按下。</li>
<li>mouseup：鼠标按钮被松开。</li>
<li>dblclick：鼠标双击。</li>
</ul>
</li>
<li><p>键盘常用的事件：</p>
<ul>
<li>keydown：当用户按下任意键时触发，按住不放会重复触发此事件。该事件不会区分字母的大小写，例如“A”和“a”被视为一致。</li>
<li>keypress：当用户按下字符键（大小写字母、数字、加号、等号、回车等）时触发，按住不放会重复触发此事件。该事件区分字母的大小写。</li>
<li>keyup：当用户释放键时触发，不区分字母的大小写。</li>
</ul>
</li>
<li><p>触屏常用的事件：</p>
<ul>
<li>touchstart：当触摸点被放在触摸屏上时。</li>
<li>touchmove：当触摸点在触摸屏上移动时。</li>
<li>touchend：当触摸点从触摸屏上拿开时。</li>
</ul>
</li>
<li><p>d3.event对象：当某个事件被监听到时，D3 会把当前的事件存到 d3.event 对象，里面保存了当前事件的各种参数。</p>
</li>
</ul>
<p><img src="./event.png" alt="event"></p>
<h3 id="布局-数据转换"><a href="#布局-数据转换" class="headerlink" title="布局(数据转换)"></a>布局(数据转换)</h3><h4 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p>布局：决定什么元素绘制在哪里。</p>
</li>
<li><p>D3与其他可视化工具的区别：</p>
<p><img src="./layout.png" alt="layout"></p>
<ul>
<li>选择 D3：如果希望开发脑海中任意想象到的图表。</li>
<li>选择 Highcharts、Echarts 等：如果希望开发几种固定种类的、十分大众化的图表。</li>
</ul>
</li>
<li><p>布局的作用：将<strong>不适合用于绘图的数据</strong>转换成了<strong>适合用于绘图的数据</strong>。</p>
</li>
</ul>
<h4 id="布局的种类"><a href="#布局的种类" class="headerlink" title="布局的种类"></a>布局的种类</h4><ul>
<li>D3提供了12个布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树状图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）</li>
<li>12 个布局中，层级图（Hierarchy）不能直接使用。集群图、打包图、分区图、树状图、矩阵树图是由层级图扩展来的。如此一来，能够使用的布局是 11 个（有 5 个是由层级图扩展而来）。这些布局的作用都是将某种数据转换成另一种数据，而转换后的数据是利于可视化的。</li>
</ul>
<h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><h4 id="绘制流程"><a href="#绘制流程" class="headerlink" title="绘制流程"></a>绘制流程</h4><ul>
<li><p>准备数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [ <span class="number">30</span> , <span class="number">10</span> , <span class="number">43</span> , <span class="number">55</span> , <span class="number">13</span> ];</div></pre></td></tr></table></figure>
</li>
<li><p>布局（数据转换）—— 计算出适合于作图的数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pie = d3.layout.pie();</div><div class="line"></div><div class="line"><span class="keyword">var</span> piedata = pie(dataset);</div></pre></td></tr></table></figure>
</li>
<li><p>绘制图形步骤：</p>
<ol>
<li><p>创建弧生成器</p>
<p>为了根据转换后的数据 piedata 来作图，还需要一样工具：生成器。</p>
<p>SVG 有一个元素，叫做路径 path，是 SVG 中功能最强的元素，它可以表示其它任意的图形。顾名思义，路径元素就是通过定义一个段“路径”，来绘制出各种图形。但是，路径是很难计算的，通过布局转换后的数据 piedata 仍然很难手动计算得到路径值。为我们完成这项任务的，就是<strong>生成器</strong>。</p>
<p>这里要用到的叫做<strong>弧生成器</strong>，能够生成弧的路径，因为饼图的每一部分都是一段弧。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> outerRadius = <span class="number">150</span>; <span class="comment">//外半径</span></div><div class="line"><span class="keyword">var</span> innerRadius = <span class="number">0</span>; <span class="comment">//内半径，为0则中间没有空白</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arc = d3.svg.arc()  <span class="comment">//弧生成器</span></div><div class="line">    .innerRadius(innerRadius)   <span class="comment">//设置内半径</span></div><div class="line">    .outerRadius(outerRadius);  <span class="comment">//设置外半径</span></div><div class="line"><span class="comment">//弧生成器返回的结果赋值给 arc。此时，arc 可以当做一个函数使用，把 piedata 作为参数传入，即可得到路径值。</span></div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<ol>
<li><p>添加图形元素</p>
<p>先在 svg 里添加足够数量（5个）个分组元素（g），每一个分组用于存放一段弧的相关元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arcs = d3.select(<span class="string">"body"</span>)</div><div class="line">           .select(<span class="string">"svg"</span>)</div><div class="line">           .attr(<span class="string">"width"</span>,<span class="number">800</span>)</div><div class="line">           .attr(<span class="string">"height"</span>,<span class="number">800</span>)</div><div class="line">           .selectAll(<span class="string">"g"</span>)</div><div class="line">           .data(piedata)</div><div class="line">           .enter()</div><div class="line">           .append(<span class="string">"g"</span>)</div><div class="line">           .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span>+(width/<span class="number">2</span>)+<span class="string">","</span>+(width/<span class="number">2</span>)+<span class="string">")"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>给每个元素添加path</p>
<p>  因为 arcs 是同时选择了 5 个 g 元素的选择集，所以调用 append(“path”) 后，每个 g 中都有 path 。路径值的属性名称是 d，调用弧生成器后返回的值赋值给它。要注意，arc(d) 的参数 d 是被绑定的数据。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = d3.scale.category10();   <span class="comment">//有十种颜色的颜色比例尺</span></div><div class="line">arcs.append(<span class="string">"path"</span>)</div><div class="line">    .attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> color(i);</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"d"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> arc(d);   <span class="comment">//调用弧生成器，得到路径值</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>添加文本</p>
<p>  arc.centroid(d) 能算出弧线的中心。要注意，text() 里返回的是 d.data ，而不是 d 。因为被绑定的数据是对象，里面有 d.startAngle、d.endAngle、d.data 等，其中 d.data 才是转换前的整数的值。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">arcs.append(<span class="string">"text"</span>)</div><div class="line">    .attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"translate("</span> + arc.centroid(d) + <span class="string">")"</span>;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"text-anchor"</span>,<span class="string">"middle"</span>)</div><div class="line">    .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> d.data;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>  ​</p>
</li>
</ol>
<h3 id="力导向图"><a href="#力导向图" class="headerlink" title="力导向图"></a>力导向图</h3><h4 id="基本概念-7"><a href="#基本概念-7" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p>力导向图（Force-Directed Graph），是绘图的一种算法。在二维或三维空间里配置<strong>节点</strong>，节点之间用线连接，称为<strong>连线</strong>。各连线的长度几乎相等，且尽可能不相交。节点和连线都被施加了<strong>力</strong>的作用，力是根据节点和连线的相对位置计算的。根据力的作用，来计算节点和连线的运动轨迹，并不断降低它们的能量，最终达到一种能量很低的安定状态。</p>
</li>
<li><p>作用：力导向图能表示节点之间的多对多的关系。</p>
<p>​</p>
</li>
</ul>
<h4 id="绘制流程-1"><a href="#绘制流程-1" class="headerlink" title="绘制流程"></a>绘制流程</h4><ul>
<li><p>准备数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodes = [</div><div class="line">               &#123;<span class="attr">name</span>:<span class="string">"桂林"</span>&#125;,</div><div class="line">               &#123;<span class="attr">name</span>:<span class="string">"广州"</span>&#125;,</div><div class="line">               &#123;<span class="attr">name</span>:<span class="string">"厦门"</span>&#125;,</div><div class="line">               &#123;<span class="attr">name</span>:<span class="string">"杭州"</span>&#125;,</div><div class="line">               &#123;<span class="attr">name</span>:<span class="string">"上海"</span>&#125;,</div><div class="line">               &#123;<span class="attr">name</span>:<span class="string">"青岛"</span>&#125;,</div><div class="line">               &#123;<span class="attr">name</span>:<span class="string">"天津"</span>&#125;</div><div class="line">           ];</div><div class="line"></div><div class="line">           <span class="keyword">var</span> edges = [</div><div class="line">               &#123;<span class="attr">source</span> : <span class="number">0</span>, <span class="attr">target</span> :<span class="number">1</span>&#125;,</div><div class="line">               &#123;<span class="attr">source</span> : <span class="number">0</span>, <span class="attr">target</span> :<span class="number">2</span>&#125;,</div><div class="line">               &#123;<span class="attr">source</span> : <span class="number">0</span>, <span class="attr">target</span> :<span class="number">3</span>&#125;,</div><div class="line">               &#123;<span class="attr">source</span> : <span class="number">1</span>, <span class="attr">target</span> :<span class="number">4</span>&#125;,</div><div class="line">               &#123;<span class="attr">source</span> : <span class="number">1</span>, <span class="attr">target</span> :<span class="number">5</span>&#125;,</div><div class="line">               &#123;<span class="attr">source</span> : <span class="number">1</span>, <span class="attr">target</span> :<span class="number">6</span>&#125;,</div><div class="line">               &#123;<span class="attr">source</span> : <span class="number">0</span>, <span class="attr">target</span> :<span class="number">6</span>&#125;</div><div class="line">           ];</div></pre></td></tr></table></figure>
</li>
<li><p>布局（数据转换）—— 计算出适合于作图的数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> force = d3.layout.force()</div><div class="line">      		.nodes(nodes) <span class="comment">//指定节点数组</span></div><div class="line">      		.links(edges) <span class="comment">//指定连线数组</span></div><div class="line">      		.size([width,height]) <span class="comment">//指定作用域范围</span></div><div class="line">     		.linkDistance(<span class="number">150</span>) <span class="comment">//指定连线长度</span></div><div class="line">     		.charge([<span class="number">-400</span>]); <span class="comment">//相互之间的作用力</span></div><div class="line"></div><div class="line">force.start();    <span class="comment">//开始作用</span></div></pre></td></tr></table></figure>
</li>
<li><p>绘制图形步骤：</p>
<ol>
<li><p>绘制三种图形元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加连线</span></div><div class="line"> <span class="keyword">var</span> svg_edges = svg.selectAll(<span class="string">"line"</span>)</div><div class="line">     .data(edges)</div><div class="line">     .enter()</div><div class="line">     .append(<span class="string">"line"</span>)</div><div class="line">     .style(<span class="string">"stroke"</span>,<span class="string">"#ccc"</span>)</div><div class="line">     .style(<span class="string">"stroke-width"</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line"> <span class="keyword">var</span> color = d3.scale.category20();</div><div class="line"></div><div class="line"> <span class="comment">//添加节点</span></div><div class="line"> <span class="keyword">var</span> svg_nodes = svg.selectAll(<span class="string">"circle"</span>)</div><div class="line">     .data(nodes)</div><div class="line">     .enter()</div><div class="line">     .append(<span class="string">"circle"</span>)</div><div class="line">     .attr(<span class="string">"r"</span>,<span class="number">20</span>)</div><div class="line">     .style(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">         <span class="keyword">return</span> color(i);</div><div class="line">     &#125;)</div><div class="line">     .call(force.drag);  <span class="comment">//使得节点能够拖动</span></div><div class="line"></div><div class="line"> <span class="comment">//添加描述节点的文字</span></div><div class="line"> <span class="keyword">var</span> svg_texts = svg.selectAll(<span class="string">"text"</span>)</div><div class="line">     .data(nodes)</div><div class="line">     .enter()</div><div class="line">     .append(<span class="string">"text"</span>)</div><div class="line">     .style(<span class="string">"fill"</span>, <span class="string">"black"</span>)</div><div class="line">     .attr(<span class="string">"dx"</span>, <span class="number">20</span>)</div><div class="line">     .attr(<span class="string">"dy"</span>, <span class="number">8</span>)</div><div class="line">     .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> d.name;</div><div class="line">     &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>更新节点和连线的位置</p>
<p>力导向图布局 force 有一个事件 tick，每进行到一个时刻，都要调用它，更新的内容就写在它的监听器里就好。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">force.on(<span class="string">"tick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//对于每一个时间间隔</span></div><div class="line">    <span class="comment">//更新连线坐标</span></div><div class="line">    svg_edges.attr(<span class="string">"x1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.source.x; &#125;)</div><div class="line">        .attr(<span class="string">"y1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.source.y; &#125;)</div><div class="line">        .attr(<span class="string">"x2"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.target.x; &#125;)</div><div class="line">        .attr(<span class="string">"y2"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.target.y; &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//更新节点坐标</span></div><div class="line">    svg_nodes.attr(<span class="string">"cx"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.x; &#125;)</div><div class="line">        .attr(<span class="string">"cy"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.y; &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//更新文字坐标</span></div><div class="line">    svg_texts.attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.x; &#125;)</div><div class="line">       .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.y; &#125;);</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
</li>
</ul>
<h3 id="树状图"><a href="#树状图" class="headerlink" title="树状图"></a>树状图</h3><h4 id="基本概念-8"><a href="#基本概念-8" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p>树状图：可表示节点之间的包含于被包含的关系</p>
</li>
<li><p>JSON数据（JavaScript Object Notation）是一种轻量级的数据交换格式，本例中通过读取json文件中的数据来展示树状图。</p>
<p>​</p>
</li>
</ul>
<h4 id="绘制流程-2"><a href="#绘制流程-2" class="headerlink" title="绘制流程"></a>绘制流程</h4><ul>
<li><p>准备数据</p>
<p>以下数据表示“中国-省份名称-城市名称-区县名称”的包含与被包含关系</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"name"</span>:<span class="string">"中国"</span>,</div><div class="line"><span class="attr">"children"</span>:</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"name"</span>:<span class="string">"浙江"</span> ,</div><div class="line">      <span class="attr">"children"</span>:</div><div class="line">      [</div><div class="line">            &#123;<span class="attr">"name"</span>:<span class="string">"杭州"</span> &#125;,</div><div class="line">            &#123;<span class="attr">"name"</span>:<span class="string">"宁波"</span> &#125;,</div><div class="line">            &#123;<span class="attr">"name"</span>:<span class="string">"温州"</span> &#125;,</div><div class="line">            &#123;<span class="attr">"name"</span>:<span class="string">"绍兴"</span> &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        <span class="attr">"name"</span>:<span class="string">"广西"</span> ,</div><div class="line">        <span class="attr">"children"</span>:</div><div class="line">        [</div><div class="line">            &#123;</div><div class="line">            <span class="attr">"name"</span>:<span class="string">"桂林"</span>,</div><div class="line">            <span class="attr">"children"</span>:</div><div class="line">            [</div><div class="line">                &#123;<span class="attr">"name"</span>:<span class="string">"秀峰区"</span>&#125;,</div><div class="line">                &#123;<span class="attr">"name"</span>:<span class="string">"叠彩区"</span>&#125;,</div><div class="line">                &#123;<span class="attr">"name"</span>:<span class="string">"象山区"</span>&#125;,</div><div class="line">                &#123;<span class="attr">"name"</span>:<span class="string">"七星区"</span>&#125;</div><div class="line">            ]</div><div class="line">            &#125;,</div><div class="line">            &#123;<span class="attr">"name"</span>:<span class="string">"南宁"</span>&#125;,</div><div class="line">            &#123;<span class="attr">"name"</span>:<span class="string">"柳州"</span>&#125;,</div><div class="line">            &#123;<span class="attr">"name"</span>:<span class="string">"防城港"</span>&#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>布局（数据转换）—— 计算出适合于作图的数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> tree = d3.layout.tree()</div><div class="line">                    .size([width,height<span class="number">-200</span>]) <span class="comment">//设定尺寸，即转换后的各节点的坐标在哪一个范围内</span></div><div class="line">                    .separation(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="comment">//设定节点之间的间隔</span></div><div class="line">                        <span class="keyword">return</span> (a.parent === b.parent ? <span class="number">1</span> : <span class="number">2</span>);</div><div class="line">                    &#125;);</div><div class="line"></div><div class="line">d3.json(<span class="string">"./data.json"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,root</span>)</span>&#123; <span class="comment">//向服务器请求JSON文件</span></div><div class="line">                <span class="keyword">var</span> nodes = tree.nodes(root);<span class="comment">//nodes 中有各个节点的子节点（children）、深度（depth）、名称（name）、位置（x，y）信息，其中名称（name）是 json 文件中就有的属性。</span></div><div class="line">                <span class="keyword">var</span> links = tree.links(nodes);<span class="comment">//links 中有连线两端（ source , target ）的节点信息。</span></div><div class="line">&#125;</div><div class="line">        <span class="comment">//Chrome中禁止访问本地文件，需要搭建网络服务器进行访问，如http-server或Apache</span></div></pre></td></tr></table></figure>
</li>
<li><p>绘制图形步骤：</p>
<ol>
<li><p>创建对角线生成器</p>
<p>D3中提供了绘制函数：d3.svg.diagonal()，即只要输入两个顶点坐标，便可生成一条贝塞尔曲线</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> diagonal = d3.svg.diagonal()</div><div class="line">    .projection(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> [d.y, d.x]; &#125;);</div><div class="line"><span class="comment">//projection() 是一个点变换器，默认是 [ d.x , d.y ]，即保持原坐标不变，如果写成 [ d.y , d.x ] ，即是说对任意输入的顶点，都交换 x 和 y 坐标。</span></div></pre></td></tr></table></figure>
</li>
<li><p>绘制连线</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = svg.selectAll(<span class="string">".link"</span>)</div><div class="line">      .data(links)</div><div class="line">      .enter()</div><div class="line">      .append(<span class="string">"path"</span>)</div><div class="line">      .attr(<span class="string">"class"</span>, <span class="string">"link"</span>)</div><div class="line">      .attr(<span class="string">"d"</span>, diagonal);   <span class="comment">//使用对角线生成器</span></div></pre></td></tr></table></figure>
</li>
<li><p>绘制节点圆圈和文字</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> node = svg.selectAll(<span class="string">".node"</span>)</div><div class="line">              .data(nodes)</div><div class="line">              .enter()</div><div class="line">              .append(<span class="string">"g"</span>)</div><div class="line">              .attr(<span class="string">"class"</span>,<span class="string">"node"</span>)</div><div class="line">              .attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                   <span class="keyword">return</span> <span class="string">"translate("</span>+d.y+<span class="string">","</span>+d.x+<span class="string">")"</span>;</div><div class="line">              &#125;);</div><div class="line"></div><div class="line">node.append(<span class="string">"circle"</span>)</div><div class="line">  	.attr(<span class="string">"r"</span>,<span class="number">4.5</span>);</div><div class="line"></div><div class="line">node.append(<span class="string">"text"</span>)</div><div class="line">    .attr(<span class="string">"dx"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> d.children ? <span class="number">-8</span> : <span class="number">8</span> ;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"dy"</span>,<span class="number">3</span>)</div><div class="line">    .style(<span class="string">"text-anchor"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> d.children ? <span class="string">"end"</span>:<span class="string">"start"</span>;</div><div class="line">    &#125;)</div><div class="line">    .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> d.name ;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
</li>
</ul>
<h3 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h3><h4 id="基本概念-9"><a href="#基本概念-9" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p>地图：在数据可视化中，地图展示是很重要的一部分，很多情况会与地图有关联，如中国各省的人口多少，GDP多少等，都可以和地图联系在一起。</p>
<p>​</p>
</li>
</ul>
<h4 id="绘制流程-3"><a href="#绘制流程-3" class="headerlink" title="绘制流程"></a>绘制流程</h4><ul>
<li><p>准备数据</p>
<p>地图数据的获取：将JSON个格式应用于地理上的文件，叫做GeoJson文件。中国地图的 GeoJSON 文件： <a href="http://www.ourd3js.com/demo/rm/R-10.0/china.geojson" target="_blank" rel="external">china.geojson</a>。这个文件是用 <a href="http://www.naturalearthdata.com/downloads/" target="_blank" rel="external">Natural Earth</a> 上的数据，经过提取后制作而成，去掉了很多无用的信息，只保留的中国的各省份的名字和 id 号，在这里先感谢 Natural Earth 提供的数据。</p>
</li>
<li><p>投影函数</p>
<p>由于 GeoJSON 文件中的地图数据，都是经度和纬度的信息。它们都是三维的，而要在网页上显示的是二维的，所以要设定一个投影函数来转换经度纬度。如下所示，使用 d3.geo.mercator() 的投影方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> projection = d3.geo.mercator()</div><div class="line">                 .center([<span class="number">107</span>,<span class="number">31</span>]) <span class="comment">//设定地图中心位置</span></div><div class="line">                 .scale(<span class="number">850</span>) <span class="comment">//设定放大的比例</span></div><div class="line">                 .translate([width/<span class="number">2</span>,height/<span class="number">2</span>]); <span class="comment">//设定平移</span></div></pre></td></tr></table></figure>
</li>
<li><p>地理路径生成器</p>
<p>为了根据地图的地理数据生成 SVG 中 path 元素的路径值，需要用到 d3.geo.path()，我称它为地理路径生成器。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = d3.geo.path()</div><div class="line">    .projection(projection);</div><div class="line"><span class="comment">//projection() 是设定生成器的投影函数，把上面定义的投影传入即可。以后，当使用此生成器计算路径时，会自己加入投影的影响。</span></div></pre></td></tr></table></figure>
</li>
<li><p>向服务器请求文件并绘制地图</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">d3.json(<span class="string">"china.geojson"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,root</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(error)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.error(error);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">console</span>.log(root.features);</div><div class="line">            svg.selectAll(<span class="string">"path"</span>)</div><div class="line">                .data(root.features)</div><div class="line">                .enter()</div><div class="line">                .append(<span class="string">"path"</span>)</div><div class="line">                .attr(<span class="string">"stroke"</span>,<span class="string">"#000"</span>)</div><div class="line">                .attr(<span class="string">"stroke-width"</span>,<span class="number">1</span>)</div><div class="line">                .attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> color(i);</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"d"</span>,path) <span class="comment">//使用地理路径生成器</span></div><div class="line">                .on(<span class="string">"mouseover"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">                    d3.select(<span class="keyword">this</span>).attr(<span class="string">"fill"</span>,<span class="string">"yellow"</span>);</div><div class="line">                &#125;)</div><div class="line">                .on(<span class="string">"mouseout"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">                    d3.select(<span class="keyword">this</span>).attr(<span class="string">"fill"</span>,color(i));</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文的内容是博主在学习D3.js时在配合查阅资料及官方文档所积累的使用D3基本方式与方法。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="D3" scheme="http://yoursite.com/tags/D3/"/>
    
      <category term="函数库" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记</title>
    <link href="http://yoursite.com/2017/05/20/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/05/20/React学习笔记/</id>
    <published>2017-05-20T08:38:29.000Z</published>
    <updated>2017-10-16T07:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文的内容是博主在学习React前端框架时在阅读官方文档教程时所积累的知识点和重点。</p>
<a id="more"></a>
<h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><ul>
<li><p>注意点：</p>
<ul>
<li><p>不能直接修改state值，而应该使用setState()方法；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.state.comment = <span class="string">'Hello'</span>;<span class="comment">//Wrong</span></div><div class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">comment</span>:<span class="string">'Hello'</span>&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>state更新可能是异步的，因此不能依赖它们的值来计算下next state;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(&#123;      <span class="comment">//Wrong</span></div><div class="line">  counter:<span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">preState,props</span>) =&gt;</span>(&#123; <span class="comment">//Correct</span></div><div class="line">  counter:preState.counter + props.increment</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
</li>
<li><p>state更新是被合并的,当改变其中一个state时，其他state将被合并而不会缺失。</p>
</li>
</ul>
</li>
<li><p>单向数据流动：</p>
<ul>
<li><p>state只能在拥有并且设置它的组件中访问，所以是局部变量或封装的变量；</p>
</li>
<li><p>组件可以将其state作为props传递给其子组件；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 父组件</span></div><div class="line">&lt;FormateedDate date=&#123;<span class="keyword">this</span>.state.date&#125; /&gt;</div><div class="line"><span class="comment">// 子组件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">FormateedDate</span>(<span class="params">props</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;props.date.toLocalTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>识别UI的state的最小表示：</p>
<ul>
<li><p>通过props传入的不作为state；</p>
</li>
<li><p>随着时间变化，始终保持不变的不作为state；</p>
</li>
<li><p>可以根据组件中的其他state或props计算出来的不作为state；</p>
<p>​</p>
</li>
</ul>
</li>
</ul>
<h4 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h4><ul>
<li><p>与html定义方法的区别：</p>
<ul>
<li><p>react事件用驼峰式命名，而html事件用小写字母命名；</p>
</li>
<li><p>用JSX时，将方法传递给事件处理，而不是字符串；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;</div><div class="line">ACtivate Lasers</div><div class="line">&lt;<span class="regexp">/button&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>不能return false作为默认行为，而必须显示调用preventDefault.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  e.preventDefault();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'The link was clicked'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>事件方法需要绑定到this上</p>
<ul>
<li><p>常规做法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">handleClick()&#123;</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span>(&#123;</div><div class="line">      <span class="attr">isToggle</span>:!prevState.isToggle</div><div class="line">    &#125;));</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将方法作为变量赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">handleClick = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span>(&#123;</div><div class="line">      <span class="attr">isToggle</span>:!prevState.isToggle</div><div class="line">    &#125;));</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>带参传递</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button onClick=&#123;(e)=&gt;this.handleClick(e)&#125;&gt;&#123;this.state.isToggle?&apos;On&apos;:&apos;OFF&apos;&#125;&lt;/button&gt;</div></pre></td></tr></table></figure>
<p>问题：每次渲染时都会创建一个不同的回调函数，大多数情况下没有问题，但是，如果这个回调要吃传递给子组件时，就会进行额外的重新渲染。所以通常建议前两种方式。</p>
<p>​</p>
</li>
</ul>
</li>
</ul>
<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><ul>
<li><p>控制组件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">handleChange(e)&#123;</div><div class="line">  this.setState(&#123;value:e.target.value&#125;);</div><div class="line">&#125;</div><div class="line">&lt;form&gt;</div><div class="line">	&lt;label&gt;Name:</div><div class="line">    	&lt;input type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">    &lt;/label&gt;</div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>textarea标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">handleChange(e)&#123;</div><div class="line">  this.setState(&#123;value:e.target.value&#125;);</div><div class="line">&#125;</div><div class="line">&lt;form&gt;</div><div class="line">	&lt;label&gt;Name:</div><div class="line">    	&lt;textarea value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">    &lt;/label&gt;</div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>select标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">this.state = &#123;selectValue: &apos;coconut&apos;&#125;;</div><div class="line"></div><div class="line">handleSelectChange(e)&#123;</div><div class="line">	this.setState(&#123;SelectValue:e.target.value&#125;);</div><div class="line">&#125;</div><div class="line">handleSubmit(e)&#123;</div><div class="line">    alert(&apos;Your favorite flavor is &apos;+ this.state.selectValue);</div><div class="line">    e.preventDefault();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;label&gt;Pick:</div><div class="line">	&lt;select value=&#123;this.state.selectValue&#125; onChange=&#123;this.handleSelectChange&#125;&gt;</div><div class="line">    	&lt;option value=&quot;grapefruit&quot;&gt;Grapefruit&lt;/option&gt;</div><div class="line">        &lt;option value=&quot;lime&quot;&gt;Lime&lt;/option&gt;</div><div class="line">        &lt;option value=&quot;coconut&quot;&gt;Coconut&lt;/option&gt;</div><div class="line">        &lt;option value=&quot;mango&quot;&gt;Mango&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/label&gt;</div><div class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; onClick=&#123;this.handleSubmit&#125;/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>处理多输入——添加name属性，并根据该属性判断需要更改的部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">this.state = &#123;</div><div class="line">  isGoing:true,</div><div class="line">  numberOfGuest:2</div><div class="line">&#125;;</div><div class="line"></div><div class="line">handleInputChange(e)&#123;</div><div class="line">    const target = e.target;</div><div class="line">    const value = target.type === &apos;checkbox&apos;? target.checked:target.value;</div><div class="line">    const name = target.name;</div><div class="line">    this.setState(&#123;</div><div class="line">      [name]:value</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;label&gt;Is going:</div><div class="line">	&lt;input name=&quot;isGoing&quot; type=&quot;checkbox&quot; checked=&#123;this.state.isGoing&#125; onChange=&#123;this.handleInputChange&#125;/&gt;</div><div class="line">&lt;/label&gt;&lt;br/&gt;</div><div class="line">&lt;label&gt;Number of guests:</div><div class="line">	&lt;input name=&quot;numberOfGuest&quot; type=&quot;number&quot; value=&#123;this.state.numberOfGuest&#125; onChange=&#123;this.handleInputChange&#125;/&gt;</div><div class="line">&lt;/label&gt;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h4 id="JSX高级用法"><a href="#JSX高级用法" class="headerlink" title="JSX高级用法"></a>JSX高级用法</h4><ul>
<li><p>传播属性：</p>
<p>如果props作为对象传递，则可通过’…’作为扩展运算符进行传递，以下两种方式等效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function App1() &#123;</div><div class="line">  return &lt;Greeting firstName=&quot;Ben&quot; lastName=&quot;Hector&quot; /&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function App2() &#123;</div><div class="line">  const props = &#123;firstName: &apos;Ben&apos;, lastName: &apos;Hector&apos;&#125;;</div><div class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>JSX中的children</p>
<p>在包含开始标签和结束标签的JSX表达式中，这些标记之间的内容作为一个特殊的道具：props.children传递。 有几种不同的方法来传递孩子：</p>
<ul>
<li><p>字符串作为children</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;MyComponent&gt;Hello world!&lt;/MyComponent&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>jsx组件作为children</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;MyContainer&gt;</div><div class="line">  &lt;MyFirstComponent /&gt;</div><div class="line">  &lt;MySecondComponent /&gt;</div><div class="line">&lt;/MyContainer&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>javascript表达式作为children</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;MyComponent&gt;foo&lt;/MyComponent&gt;</div><div class="line"></div><div class="line">&lt;MyComponent&gt;&#123;&apos;foo&apos;&#125;&lt;/MyComponent&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>function作为children</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// Calls the children callback numTimes to produce a repeated component</div><div class="line">function Repeat(props) &#123;</div><div class="line">  let items = [];</div><div class="line">  for (let i = 0; i &lt; props.numTimes; i++) &#123;</div><div class="line">    items.push(props.children(i));</div><div class="line">  &#125;</div><div class="line">  return &lt;div&gt;&#123;items&#125;&lt;/div&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function ListOfTenThings() &#123;</div><div class="line">  return (</div><div class="line">    &lt;Repeat numTimes=&#123;10&#125;&gt;</div><div class="line">      &#123;(index) =&gt; &lt;div key=&#123;index&#125;&gt;This is item &#123;index&#125; in the list&lt;/div&gt;&#125;</div><div class="line">    &lt;/Repeat&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Booleans, Null, and Undefined 被忽略，不被渲染</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div /&gt;</div><div class="line"></div><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div&gt;&#123;false&#125;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div&gt;&#123;null&#125;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div&gt;&#123;undefined&#125;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div&gt;&#123;true&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
</li>
</ul>
<h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><blockquote>
<p>注意：<em><code>React.PropTypes</code>不再适用于React v15.5。 请改用prop-types库。</em></p>
</blockquote>
<ul>
<li><p><code>propTypes</code>属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import PropTypes from &apos;prop-types&apos;;</div><div class="line"></div><div class="line">class Greeting extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Greeting.propTypes = &#123;</div><div class="line">  name: PropTypes.string</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>PropTypes</code>导出一系列验证器，可用于确保您接收的数据有效。 在这个例子中，我们使用<code>PropTypes.string</code>。 当为一个道具提供无效值时，JavaScript控制台中将显示警告。 出于性能原因，仅在<strong>开发模式</strong>下检查<code>propTypes</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">import PropTypes from &apos;prop-types&apos;;</div><div class="line"></div><div class="line">MyComponent.propTypes = &#123;</div><div class="line">  // You can declare that a prop is a specific JS primitive. By default, these</div><div class="line">  // are all optional.</div><div class="line">  optionalArray: PropTypes.array,</div><div class="line">  optionalBool: PropTypes.bool,</div><div class="line">  optionalFunc: PropTypes.func,</div><div class="line">  optionalNumber: PropTypes.number,</div><div class="line">  optionalObject: PropTypes.object,</div><div class="line">  optionalString: PropTypes.string,</div><div class="line">  optionalSymbol: PropTypes.symbol,</div><div class="line"></div><div class="line">  // Anything that can be rendered: numbers, strings, elements or an array</div><div class="line">  // (or fragment) containing these types.</div><div class="line">  optionalNode: PropTypes.node,</div><div class="line"></div><div class="line">  // A React element.</div><div class="line">  optionalElement: PropTypes.element,</div><div class="line"></div><div class="line">  // You can also declare that a prop is an instance of a class. This uses</div><div class="line">  // JS&apos;s instanceof operator.</div><div class="line">  optionalMessage: PropTypes.instanceOf(Message),</div><div class="line"></div><div class="line">  // You can ensure that your prop is limited to specific values by treating</div><div class="line">  // it as an enum.</div><div class="line">  optionalEnum: PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</div><div class="line"></div><div class="line">  // An object that could be one of many types</div><div class="line">  optionalUnion: PropTypes.oneOfType([</div><div class="line">    PropTypes.string,</div><div class="line">    PropTypes.number,</div><div class="line">    PropTypes.instanceOf(Message)</div><div class="line">  ]),</div><div class="line"></div><div class="line">  // An array of a certain type</div><div class="line">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</div><div class="line"></div><div class="line">  // An object with property values of a certain type</div><div class="line">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</div><div class="line"></div><div class="line">  // An object taking on a particular shape</div><div class="line">  optionalObjectWithShape: PropTypes.shape(&#123;</div><div class="line">    color: PropTypes.string,</div><div class="line">    fontSize: PropTypes.number</div><div class="line">  &#125;),</div><div class="line"></div><div class="line">  // You can chain any of the above with `isRequired` to make sure a warning</div><div class="line">  // is shown if the prop isn&apos;t provided.</div><div class="line">  requiredFunc: PropTypes.func.isRequired,</div><div class="line"></div><div class="line">  // A value of any data type</div><div class="line">  requiredAny: PropTypes.any.isRequired,</div><div class="line">  // You can also specify a custom validator. It should return an Error</div><div class="line">  // object if the validation fails. Don&apos;t `console.warn` or throw, as this</div><div class="line">  // won&apos;t work inside `oneOfType`.</div><div class="line">  customProp: function(props, propName, componentName) &#123;</div><div class="line">    if (!/matchme/.test(props[propName])) &#123;</div><div class="line">      return new Error(</div><div class="line">        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +</div><div class="line">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // You can also supply a custom validator to `arrayOf` and `objectOf`.</div><div class="line">  // It should return an Error object if the validation fails. The validator</div><div class="line">  // will be called for each key in the array or object. The first two</div><div class="line">  // arguments of the validator are the array or object itself, and the</div><div class="line">  // current item&apos;s key.</div><div class="line">  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;</div><div class="line">    if (!/matchme/.test(propValue[key])) &#123;</div><div class="line">      return new Error(</div><div class="line">        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +</div><div class="line">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p><code>defaultProps</code>属性：</p>
<p>如果父组件未指定，则defaultProps将用于确保this.props.name将具有值。 在defaultProps解决之后，propTypes类型检查就会发生，因此类型检查也将应用于defaultProps。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Greeting extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Specifies the default values for props:</div><div class="line">Greeting.defaultProps = &#123;</div><div class="line">  name: &apos;Stranger&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// Renders &quot;Hello, Stranger&quot;:</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Greeting /&gt;,</div><div class="line">  document.getElementById(&apos;example&apos;)</div><div class="line">);r</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h4 id="Refs和DOM"><a href="#Refs和DOM" class="headerlink" title="Refs和DOM"></a>Refs和DOM</h4><ul>
<li><p>使用refs的情况：</p>
<ul>
<li>管理focus、文本选择、媒体播放等；</li>
<li>触发强制动画；</li>
<li>集成第三方DOM库；</li>
</ul>
</li>
<li><p>在DOM元素上添加ref属性</p>
<ul>
<li><p>React支持一个可以附加到任何组件的特殊属性。 ref属性采用回调函数，并且在组件被装载或卸载后立即执行回调。当在HTML元素上使用ref属性时，ref回调接收底层的DOM元素作为其参数。 例如，此代码使用引用回调来存储对DOM节点的引用：当组件挂载时，React将使用DOM元素调用ref回调，并在卸载时将其调用为null。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">export default class CustomTextInput extends Component&#123;</div><div class="line">  constructor(props)&#123;</div><div class="line">    super(props);</div><div class="line">    this.focus2 = this.focus2.bind(this);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  focus2()&#123;</div><div class="line">    this.textInput.focus();</div><div class="line">    this.textInput.value = &apos;123&apos;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    return(</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type=&quot;text&quot; ref=&#123;(input)=&gt;&#123;this.textInput = input;console.log(input);&#125;&#125;/&gt;</div><div class="line">        &lt;input type=&quot;button&quot; value=&quot;Focus the text input&quot; onClick=&#123;this.focus2&#125;/&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//控制台输出：&lt;input type=&quot;text&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在类组件上添加ref属性</p>
<ul>
<li><p>当在声明为类的自定义组件上使用ref属性时，ref回调接收组件的已挂接实例作为其参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">export default class AutoFocusTextInput extends React.Component &#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    this.textInput.focus();</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;CustomTextInput</div><div class="line">        ref=&#123;(input) =&gt; &#123; this.textInput = input;console.log(input);&#125;&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//控制台输出：CustomTextInput &#123;props: Object, context: Object, refs: Object, updater: Object, focus: function…&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在form表单中使用不受控制的组件：</p>
<p>要编写不受控制的组件，不需要为每个状态更新编写事件处理程序，而可以使用ref从DOM获取表单值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class NameForm extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.handleSubmit = this.handleSubmit.bind(this);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    alert(&apos;A name was submitted: &apos; + this.input.value);</div><div class="line">    event.preventDefault();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">         &lt;label&gt;Ref Name:</div><div class="line">            &lt;input type=&quot;text&quot; ref=&#123;(refInput)=&gt; this.input = refInput&#125;/&gt;</div><div class="line">          &lt;/label&gt;</div><div class="line">        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="优化性能"><a href="#优化性能" class="headerlink" title="优化性能"></a>优化性能</h4><ul>
<li><p>使用生产者模式；</p>
</li>
<li><p>使用shouldComponentUpdate</p>
<ul>
<li>默认情况下<code>shouldComponentUpdate(nextProps,nextState)()</code>方法返回true，默认更新，可以在其中增加条件判断，使其返回false而不更新组件；</li>
<li>通过集成React.PureComponent也可以达到SCU的效果，不过它只是浅比较，在复杂数据结构中不适用</li>
</ul>
</li>
<li><p>不改变数据，拷贝出一个新对象：</p>
<ul>
<li><p>数组的拷贝：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//concat方式</div><div class="line">handleClick() &#123;</div><div class="line">  this.setState(prevState =&gt; (&#123;</div><div class="line">    words: prevState.words.concat([&apos;marklar&apos;])</div><div class="line">  &#125;));</div><div class="line">&#125;</div><div class="line">//ES6方式</div><div class="line">handleClick() &#123;</div><div class="line">  this.setState(prevState =&gt; (&#123;</div><div class="line">    words: [...prevState.words, &apos;marklar&apos;],</div><div class="line">  &#125;));</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>对象的拷贝：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//assign方式</div><div class="line">function updateColorMap(colormap) &#123;</div><div class="line">  return Object.assign(&#123;&#125;, colormap, &#123;right: &apos;blue&apos;&#125;);</div><div class="line">&#125;</div><div class="line">//ES6方式</div><div class="line">function updateColorMap(colormap) &#123;</div><div class="line">  return &#123;...colormap, right: &apos;blue&apos;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用Immutable数据结构</p>
<p>Immutable.js通过结构共享提供不变的，持久的集合：</p>
<ul>
<li><p>不可变性：一旦创建，集合不能在另一个时间点改变；</p>
</li>
<li><p>持久性：可以从先前的集合创建新的集合，并且可以创建诸如集合的突变。 创建新集合后，原始集合仍然有效；</p>
</li>
<li><p>结构共享性：使用尽可能多的与原始集合相同的结构创建新集合，将复制减少到最低限度以提高性能。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> SomeRecord = Immutable.Record(&#123; <span class="attr">foo</span>: <span class="literal">null</span> &#125;);</div><div class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> SomeRecord(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;);</div><div class="line"><span class="keyword">const</span> y = x.set(<span class="string">'foo'</span>, <span class="string">'baz'</span>);</div><div class="line">x === y; <span class="comment">// false</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h4><ul>
<li><p>React实现了基于两个假设的启发式O（n）算法：</p>
<ul>
<li>不同类型的两个元素将产生不同的树；</li>
<li>开发人员可以提示哪些子元素可能在不同的渲染与稳定的基础上是稳定的。</li>
</ul>
</li>
<li><p>Diff算法——当比较两个树的时候，react最先比较两个根元素，根元素类型不同则具体行为也不同。</p>
<ul>
<li><p>不同类型的元素</p>
<ol>
<li>如果根元素的类型不同，则丢弃旧树构建新树</li>
<li>当丢弃旧树时，旧的DOM节点被破坏。 组件实例接收componentWillUnmount（）， 当构建一个新树时，会将新的DOM节点插入到DOM中。 组件实例接收componentWillMount（），然后接收componentDidMount（）。 与旧树相关联的任何状态都将丢失。</li>
</ol>
</li>
<li><p>相同类型的DOM元素</p>
<ol>
<li>当比较两个相同类型的React DOM元素时，React会查看两者的属性，保留相同的底层DOM节点，并且只更新已更改的属性。</li>
<li>处理DOM节点后，React然后对子节点进行递归。</li>
</ol>
</li>
<li><p>相同类型的组件元素</p>
<ol>
<li>当组件更新时，实例保持不变，从而在渲染之间保持状态。 React更新底层组件实例的props并匹配新元素，并调用底层实例上的componentWillReceiveProps（）和componentWillUpdate（）。</li>
<li>接下来，调用render（）方法，并且通过diff算法对先前的结果和新结果进行递归。</li>
</ol>
</li>
<li><p>递归子元素</p>
<ol>
<li>默认情况下，当对DOM节点的子代进行递归时，React只会同时遍历两个列表的子句，并在有差异时生成变异。</li>
<li>例如，当在孩子的最后添加一个元素时，在这两个树之间进行转换效果很好；</li>
<li>而如果在开始处插入元素，则性能将会降低。</li>
</ol>
</li>
<li><p>Keys</p>
<ol>
<li><p>为了上面3中的问题，React支持一个key属性，用来标识所属元素；</p>
</li>
<li><p>key只是在元素的兄弟元素间是唯一的，而非在全局中唯一;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/li&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>key应该是稳定的，可预测的和唯一的。 不稳定的key（如Math.random（）生成的））将导致许多组件实例和DOM节点被不必要地重新创建，这会导致子组件的性能下降和state的丢失。</p>
<p>​</p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><blockquote>
<p>注意：<em>从React v15.5起，<code>React.PropTypes</code>帮助器已被弃用，我们建议使用<code>prop-types</code>库来定义<code>contextTypes</code></em>。</p>
<p>提醒：一般 不推荐使用上下文，目前它还在试验阶段，有更新版本的风险，会使得程序不稳定。</p>
</blockquote>
<ul>
<li><p>当组件层级嵌套过多，产生数据流传递层数增多的情况，此时可以选择使用Redux或MobX框架进行状态管理，而Context也能达到类似的效果，实例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Button extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;button style=&#123;&#123;background: this.props.color&#125;&#125;&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/button&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Message extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;this.props.text&#125; &lt;Button color=&#123;this.props.color&#125;&gt;Delete&lt;/Button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MessageList extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    const color = &quot;purple&quot;;</div><div class="line">    const children = this.props.messages.map((message) =&gt;</div><div class="line">      &lt;Message text=&#123;message.text&#125; color=&#123;color&#125; /&gt;</div><div class="line">    );</div><div class="line">    return &lt;div&gt;&#123;children&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用context的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">const PropTypes = require(&apos;prop-types&apos;);</div><div class="line"></div><div class="line">class Button extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;button style=&#123;&#123;background: this.context.color&#125;&#125;&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/button&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Button.contextTypes = &#123;</div><div class="line">  color: PropTypes.string</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Message extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;this.props.text&#125; &lt;Button&gt;Delete&lt;/Button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MessageList extends React.Component &#123;</div><div class="line">  getChildContext() &#123;</div><div class="line">    return &#123;color: &quot;purple&quot;&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const children = this.props.messages.map((message) =&gt;</div><div class="line">      &lt;Message text=&#123;message.text&#125; /&gt;</div><div class="line">    );</div><div class="line">    return &lt;div&gt;&#123;children&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MessageList.childContextTypes = &#123;</div><div class="line">  color: PropTypes.string</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面通过将<code>childContextTypes</code>和<code>getChildContext</code>添加到MessageList（上下文提供程序），React将自动传递信息，子树中的任何组件（在本例中为Button）都可以通过定义contextTypes来访问它。</p>
</li>
<li><p>在生命周期方法中引用上下文：</p>
<p>如果<code>contextTypes</code>在组件中定义，则以下生命周期方法将接收一个附加参数，即上下文对象：</p>
<ul>
<li><code>constructor(props, context)</code></li>
<li><code>componentWillReceiveProps(nextProps, nextContext)</code></li>
<li><code>shouldComponentUpdate(nextProps, nextState, nextContext)</code></li>
<li><code>componentWillUpdate(nextProps, nextState, nextContext)</code></li>
<li><code>componentDidUpdate(prevProps, prevState, prevContext)</code></li>
</ul>
</li>
<li><p>在无状态的功能组件中引用上下文：</p>
<p>如果<code>contextTypes</code>被定义为该函数的属性，则无状态功能组件也能够引用上下文。 以下代码显示了一个作为无状态功能组件编写的Button组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const PropTypes = require(&apos;prop-types&apos;);</div><div class="line"></div><div class="line">const Button = (&#123;children&#125;, context) =&gt;</div><div class="line">  &lt;button style=&#123;&#123;background: context.color&#125;&#125;&gt;</div><div class="line">    &#123;children&#125;</div><div class="line">  &lt;/button&gt;;</div><div class="line"></div><div class="line">Button.contextTypes = &#123;color: PropTypes.string&#125;;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h4 id="高阶组件（HOC）"><a href="#高阶组件（HOC）" class="headerlink" title="高阶组件（HOC）"></a>高阶组件（HOC）</h4><ul>
<li><p>高阶组件是React中用于重用组件逻辑的高级技术。实际上，它是一个获取组件并包装它们然后返回新组件的函数。可以替代以前Mixin中使用订阅模式的做法。</p>
</li>
<li><p>使用HOC来解决交叉问题：</p>
<blockquote>
<p>补充：不使用mixin的原因</p>
<ol>
<li>Mixins引入了隐式依赖；</li>
<li>Mixins会造成命名冲突；</li>
<li>Mixins导致复杂度增大；</li>
</ol>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文的内容是博主在学习React前端框架时在阅读官方文档教程时所积累的知识点和重点。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="知识点" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>SAP2016秋季实习VT项目在线笔试（回顾）</title>
    <link href="http://yoursite.com/2016/11/17/SAP2016%E7%A7%8B%E5%AD%A3%E5%AE%9E%E4%B9%A0VT%E9%A1%B9%E7%9B%AE%E5%9C%A8%E7%BA%BF%E7%AC%94%E8%AF%95%EF%BC%88%E5%9B%9E%E9%A1%BE%EF%BC%89/"/>
    <id>http://yoursite.com/2016/11/17/SAP2016秋季实习VT项目在线笔试（回顾）/</id>
    <published>2016-11-17T15:34:49.000Z</published>
    <updated>2016-11-23T03:41:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天，博主刚参加完SAP的2016秋季VT项目的在线笔试，趁着记忆尚存，决定在此分享一波在线考试中遇到的问题。</p>
<a id="more"></a>
<h3 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h3><p> 十月底，SAP来到我校进行宣讲，这是算比较早的来招实习生的企业了，因为往届一般企业都是来年三四月份才来的，因为我们学院硕士一般都是两年制，研一下半学期就要参加实习了，所以，博主对来校宣讲的各个实习单位都是比较关注的。参加完SAP的宣讲，对该企业也有了大致的了解，所以作为第一个投递简历的公司，还是很认真对待的。<br> 11月14日中午，博主刚考完试准备出去办点事情便接到了来自SAP的电话面试，过程持续大概十多分钟，主要是问你对SAP的了解，对VT项目的了解，自己擅长的技术以及个人未来的职业规划，还有就是英文的自我介绍（毕竟是外企，对这方面还是有需要考察）。下午，博主收到笔试邀请并确认。</p>
<h3 id="笔试流程"><a href="#笔试流程" class="headerlink" title="笔试流程"></a>笔试流程</h3><p> 言归正传，说到笔试，此次SAP使用了赛码网进行在线考试，要求有点多，无外乎浏览器版本要求，全程开启摄像头，以及一些防止作弊事项。博主提前一小时登陆系统，结果不知道是电脑问题还是浏览器问题，摄像头一直无法被Chrome浏览器调用，所有不得不临时借别人的电脑进行考试。<br> 虽然有些坎坷，但是笔试还是有惊无险地开始了。博主考的是技术综合，一共15道选择（单选和多选）和一道编程大题。前面15道题目涵盖了数据结构、网络通信、编译原理、离散数学、前端知识等，总之感觉就像把本科所学的各门功课都遍历了一遍，虽然博主一心想投前端岗，但是毕竟这个基础理论知识的门槛还是得过的。此次测试一共75分钟，选择题大概用了35分钟，提交后就不能修改。然后预留了40分钟的时间来做编程大题，虽然题目就一道，而且预留时间也算比较充裕，但由于前面的题目已经让人感觉头晕眼花了，因此大题思路一时半会也无法理清，所以考完重新回来看这道编程题，也就更加清晰明白了。</p>
<h3 id="编程题目概述"><a href="#编程题目概述" class="headerlink" title="编程题目概述"></a>编程题目概述</h3><p> 这是一道计算城市美丽值的题目，ci表示地i个城市的美丽指数，小美每经过一个城市就会获得美感的体验。从一个城市a到城市b就会感受到ca*cb的美感值。给出小美想去的城市，并编号1-n以及它们的美丽指数，求出所有道路的美感度之和。<br>—（至此题目难度还是不大的，后面有个中心城市的概念就提高了题目的难度）—</p>
<ul>
<li>要求：</li>
<li>每个城市都严格与相邻的城市有且只有一条道路，且顺序相邻；</li>
<li>所有的中心城市和所有其他城市都有道路相连；</li>
<li>任意两个城市之间最多一条道路。</li>
</ul>
<h3 id="输入、输出及样例"><a href="#输入、输出及样例" class="headerlink" title="输入、输出及样例"></a>输入、输出及样例</h3><p>1.输入：</p>
<blockquote>
<p>第一行包括两个整数n和k分别表示n个城市和k个中心城市（3&lt;=n&lt;=100000,1&lt;=k&lt;=n）<br>第二行有n个整数，表示从第1个城市到第n个城市的美丽值ci（1&lt;=ci&lt;=10000）<br>第三行有k个整数，表示k个中心城市的标号（1&lt;=k&lt;=n）</p>
</blockquote>
<p>2.输出：</p>
<blockquote>
<p>输出所有道路的美感度之和</p>
</blockquote>
<p>3.样例输入</p>
<blockquote>
<p>4 1<br>2 3 1 2<br>3</p>
</blockquote>
<p>4.样例输出</p>
<blockquote>
<p>17</p>
</blockquote>
<h3 id="程序代码（一）"><a href="#程序代码（一）" class="headerlink" title="程序代码（一）"></a>程序代码（一）</h3><p>此处，博主给出一种最容易想到的方法来解决这个问题，关键点在于要分类讨论，而且要分析全面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		Scanner input=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> n=input.nextInt();<span class="comment">//城市个数</span></div><div class="line">		<span class="keyword">int</span> k=input.nextInt();<span class="comment">//中心城市</span></div><div class="line">		<span class="keyword">int</span>[] beauty=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">		<span class="keyword">int</span>[] keyCity=<span class="keyword">new</span> <span class="keyword">int</span>[k];</div><div class="line">		<span class="comment">//输入城市美丽值</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">		&#123;</div><div class="line">			beauty[i]=input.nextInt();</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//输入中心城市编号j，减1与数组下标对应</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</div><div class="line">		&#123;</div><div class="line">			keyCity[j]=input.nextInt()-<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		System.out.println(Main.calculateValue(beauty,keyCity));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 计算美丽值</div><div class="line">	 * @param values 各个城市美丽值集合</div><div class="line">	 * @param keys 中心城市列表</div><div class="line">	 * @return 美丽值</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateValue</span><span class="params">(<span class="keyword">int</span>[] values,<span class="keyword">int</span>[] keys)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> output=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> length=values.length;<span class="comment">//所有城市个数</span></div><div class="line">		<span class="keyword">int</span> keyCount=keys.length;<span class="comment">//中心城市个数</span></div><div class="line">		<span class="comment">//1.加上 无中心城市，相互连接计算美丽值，包含首尾相连</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(i==length-<span class="number">1</span>)&#123;</div><div class="line">				output+=values[i]*values[<span class="number">0</span>];</div><div class="line">			&#125;<span class="keyword">else</span> </div><div class="line">			&#123;</div><div class="line">				output+=values[i]*values[i+<span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//2. 加上 中心城市与其他所有城市相连</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> index:keys)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> value:values)&#123;</div><div class="line">				output+=value*values[index];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//3. 减去 自身重复计算</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> index:keys)&#123;</div><div class="line">			output-=values[index]*values[index];</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//4.减去 中心城市之间的距离</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;keyCount;i++)&#123;</div><div class="line">			<span class="keyword">int</span> indexI=keys[i];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;keyCount;j++)&#123;</div><div class="line">				<span class="keyword">int</span> indexJ=keys[j];</div><div class="line">				output-=values[indexI]*values[indexJ];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//5. 减去中心城市与相邻城市距离</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> index:keys)&#123;</div><div class="line">			<span class="keyword">int</span> left=(index+length-<span class="number">1</span>)%length;</div><div class="line">			<span class="keyword">int</span> right=(index+length+<span class="number">1</span>)%length;</div><div class="line">			output-=(values[index]*values[left]+values[index]*values[right]);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//6. 判断中心城市是否有相邻，如果有，则加上中间的距离</span></div><div class="line">		Arrays.sort(keys);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;keyCount-<span class="number">1</span>;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(keys[i+<span class="number">1</span>]-keys[i]==<span class="number">1</span>)&#123;</div><div class="line">				output+=values[keys[i]]*values[keys[i+<span class="number">1</span>]];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> output;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="程序代码（二）"><a href="#程序代码（二）" class="headerlink" title="程序代码（二）"></a>程序代码（二）</h3><p>除了上面的解决方案，在此，博主又提供了一个更为高效的方法来解决，即使用Hash值的方法来计算：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> n = scanner.nextInt(); <span class="comment">// 城市个数</span></div><div class="line">        <span class="keyword">int</span> k = scanner.nextInt(); <span class="comment">// 中心城市</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] values = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        <span class="keyword">int</span>[] keyCity = <span class="keyword">new</span> <span class="keyword">int</span>[k];</div><div class="line"></div><div class="line">        <span class="comment">// 输入城市美丽值</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            values[i] = scanner.nextInt();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 输入中心城市编号j，减1与数组下标对应</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</div><div class="line">            keyCity[j] = scanner.nextInt() - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(Test2.calculateValue(values, keyCity));</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateValue</span><span class="params">(<span class="keyword">int</span>[] values, <span class="keyword">int</span>[] keys)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> output = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> valueCount = values.length;</div><div class="line"></div><div class="line">        Set&lt;Margin&gt; marginSet = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        Margin margin;</div><div class="line"></div><div class="line">        <span class="comment">// 获取所有边</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</div><div class="line">            <span class="comment">// 所有城市相互连接，首尾相连</span></div><div class="line">            <span class="keyword">if</span> (i == valueCount - <span class="number">1</span>) &#123;</div><div class="line">                margin = <span class="keyword">new</span> Margin(i, <span class="number">0</span>);</div><div class="line">                margin.setValue(values[i] * values[<span class="number">0</span>]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                margin = <span class="keyword">new</span> Margin(i, i+<span class="number">1</span>);</div><div class="line">                margin.setValue(values[i] * values[i+<span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">            marginSet.add(margin);</div><div class="line"></div><div class="line">            <span class="comment">// 中心城市与其他连接</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index : keys) &#123;</div><div class="line">                <span class="keyword">int</span> left = (index + valueCount - <span class="number">1</span>) % valueCount;</div><div class="line">                <span class="keyword">int</span> right = (index + valueCount + <span class="number">1</span>) % valueCount;</div><div class="line">                <span class="keyword">if</span> (i != left &amp;&amp; i != right &amp;&amp; i != index) &#123;</div><div class="line">                    margin = <span class="keyword">new</span> Margin(i, index);</div><div class="line">                    margin.setValue(values[i]*values[index]);</div><div class="line">                &#125;</div><div class="line">                marginSet.add(margin);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 计算边值</span></div><div class="line">        <span class="keyword">for</span> (Object aMarginSet : marginSet) &#123;</div><div class="line">            margin = (Margin) aMarginSet;</div><div class="line">            output += margin.getValue();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> output;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义数据类型边</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Margin</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> start;  <span class="comment">// 边的起点</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> end;    <span class="comment">// 边的终点</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;  <span class="comment">// 边的权重</span></div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 带参数构造方法,为方便计算hash值，start永远为最小值，end为最大值</div><div class="line">         * <span class="doctag">@param</span> start 开始点，保证值为最小</div><div class="line">         * <span class="doctag">@param</span> end 结束点，保证值为最大</div><div class="line">         */</div><div class="line">        Margin(<span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</div><div class="line">            <span class="keyword">int</span> min = (start&gt;end?end:start);</div><div class="line">            <span class="keyword">int</span> max = (start&gt;end?start:end);</div><div class="line">            <span class="keyword">this</span>.start = min;</div><div class="line">            <span class="keyword">this</span>.end = max;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">            Margin margin = (Margin) o;</div><div class="line">            <span class="keyword">return</span> (start == margin.start &amp;&amp; end == margin.end) || (start == margin.end &amp;&amp; end == margin.start);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> result = start;</div><div class="line">            result = <span class="number">31</span> * result + end;</div><div class="line"><span class="comment">//            System.out.println("hashCode:"+result+";start:"+start+";end"+end);</span></div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天，博主刚参加完SAP的2016秋季VT项目的在线笔试，趁着记忆尚存，决定在此分享一波在线考试中遇到的问题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AngularJS中实现分页组件</title>
    <link href="http://yoursite.com/2016/10/25/AngularJS%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/10/25/AngularJS中实现分页组件/</id>
    <published>2016-10-25T08:38:29.000Z</published>
    <updated>2016-11-07T09:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文的内容是博主在封装一个angular的表格分页工具时的一些心得和体验，记录下来，方便之后的回顾。<br>所涉及到的angular的技术：指令的封装，angular的过滤</p>
<a id="more"></a>
<h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><blockquote>
<p>由于在一般管理系统中，数据量庞大，用表格来呈现数据时没有分页功能将会影响用户体验，所以开发一个既美观又实用的分页组件十分必要。为了能够更加有效地调用该组件，需要用到angular的封装组件的特性，从而减少代码冗余，提高效率。</p>
</blockquote>
<h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><blockquote>
<p>首先，参考<a href="https://angular-ui.github.io/bootstrap/#/pagination" target="_blank" rel="external">UI Bootstrap-AngularUI</a>中自带的Pagination指令，为了方便用户的使用习惯，博主选择了带箭头导航以及有省略号的分页形式。如下图：</p>
</blockquote>
<hr>
<p><img src="/upload/pagination/result.png" alt="效果图"></p>
<p>  代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">paginationTpls.html</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">uib-pagination</span> <span class="attr">total-items</span>=<span class="string">"totalItems"</span> <span class="attr">ng-model</span>=<span class="string">"currentPage"</span> <span class="attr">max-size</span>=<span class="string">"maxSize"</span></span></div><div class="line">     <span class="attr">class</span>=<span class="string">"pagination-sm form-group"</span>  <span class="attr">boundary-links</span>=<span class="string">"true"</span> <span class="attr">num-pages</span>=<span class="string">"numPages"</span> </div><div class="line">     <span class="attr">force-ellipses</span>=<span class="string">"true"</span> <span class="attr">boundary-link-numbers</span>=<span class="string">"true"</span> <span class="attr">rotate</span>=<span class="string">"true"</span></div><div class="line">     <span class="attr">items-per-page</span>=<span class="string">"itemsPerPage"</span> <span class="attr">previous-text</span>=<span class="string">"&amp;lsaquo;"</span> <span class="attr">next-text</span>=<span class="string">"&amp;rsaquo;"</span> <span class="attr">first-text</span>=<span class="string">"&amp;laquo;"</span> <span class="attr">last-text</span>=<span class="string">"&amp;raquo;"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">style</span>=<span class="string">"font-weight: normal;font-size: 12px;"</span>&gt;</span></div><div class="line">        页码: &#123;&#123;currentPage&#125;&#125; / &#123;&#123;numPages&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"view"</span> <span class="attr">ng-change</span>=<span class="string">"setItemsPerPage(view)"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">option</span> <span class="attr">ng-repeat</span>=<span class="string">"v in [5,10,15,20]"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;v&#125;&#125;"</span> <span class="attr">ng-bind</span>=<span class="string">"v"</span> <span class="attr">ng-selected</span>=<span class="string">"v==10"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>其中有几个重要的属性需要理解一下：</p>
<ul>
<li>total-items:所有页面中的项目总数</li>
<li>max-size:分页大小的限制数</li>
<li>boundary-links:(默认false)是否显示第一个/最后一个按钮</li>
<li>num-pages:分配要显示的总页数的可选表达式</li>
<li>force-ellipses:(默认false) 当总页数大于最大显示页数（max-size）显示省略号按钮</li>
<li>boundary-link-numbers:(默认false)是否总是显示第一个和最后一个页码。如果最大页码大于设置的最小显示页数,则会在最大或最小页面和中间页面之间增加一个按钮，内容为省略号，如果最大页码小于设置的最小显示页数，则不显示省略号按钮</li>
<li>rotate:(默认true)是否将当前激活页显示在中间。</li>
<li>items-per-page:每页的最大项目数</li>
<li>previous-text:上一个按钮上的文本</li>
<li>next-text:下一个按钮上的文本</li>
<li>first-text:第一个按钮上的文本</li>
<li>last-text:最后一个按钮上的文本</li>
</ul>
</blockquote>
<hr>
<p>为了能够在项目中多次复用该组件，所以需要将其封装在一个组件当中，<br>js关键代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mainModule = angular.module(<span class="string">'MainModule'</span>);</div><div class="line">mainModule.directive(<span class="string">'myPagination'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span>&#123;</div><div class="line">        <span class="attr">restrict</span>:<span class="string">'E'</span>,</div><div class="line">        <span class="attr">scope</span>:&#123;</div><div class="line">            <span class="attr">totalItems</span>:<span class="string">'@'</span>,</div><div class="line">            <span class="attr">maxSize</span>:<span class="string">'@maxSize'</span>,</div><div class="line">            <span class="attr">currentPage</span>:<span class="string">'=curPage'</span>,</div><div class="line">            <span class="attr">view</span>:<span class="string">'=viewBy'</span>,</div><div class="line">            <span class="attr">itemsPerPage</span>:<span class="string">'= itemsPer'</span>,</div><div class="line">            <span class="attr">setItemsPerPage</span>:<span class="string">'&amp;'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">templateUrl</span>:<span class="string">'partial/paginationTpls.html'</span>,</div><div class="line">        <span class="attr">replace</span>:<span class="literal">true</span>,</div><div class="line">        <span class="attr">link</span>:<span class="function"><span class="keyword">function</span> (<span class="params">scope</span>) </span>&#123;</div><div class="line">            scope.maxSize=<span class="number">5</span>;<span class="comment">//页码导航最多显示五页</span></div><div class="line">            scope.view=<span class="string">"10"</span>;<span class="comment">//一页显示最多项目数</span></div><div class="line">            scope.currentPage=<span class="number">1</span>;<span class="comment">//当前页</span></div><div class="line">            scope.itemsPerPage=scope.view;</div><div class="line">            scope.setItemsPerPage=<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">                scope.itemsPerPage = num;</div><div class="line">                scope.currentPage = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里我们封装了一个指令，相关作用及介绍如下：</p>
<ul>
<li>myPagination:我们最终在html页面上调用的指令（html页面上标签使用中划线方式使用my-pagination，指令里需要使用驼峰标识）</li>
<li>restrict:指令标识，E标识该指令为一个dom元素element,其他的还有A(attribute,属性),C(class，类),M(注释),后两者不常用。这些标识也可以结合使用，如’AE’,’AECM’等;</li>
<li>scope:定义该指令作用域，我们使用的是{}，表示新建一个作用域，里面引用了父作用域的六个变量，@表示子作用域变量引用了父作用域的相关变量（子作用域变量变化不会影响父作用域变量）；=表示子作用域对象绑定了父作用域的相关对象（同时变化）；&amp;表示子作用域引用父作用域的函数；</li>
<li>templateUrl:模版url地址</li>
<li>replace:将模版的内容追加到元素中，如果设置为 true，那么模版的内容将会替换元素的内容。</li>
<li>link:以编程的方式操作DOM，包括添加监听器、进行双向数据绑定等操作,负责在模型和数据之间进行数据关联，与compile区别是compile是以编程的方式修改DOM模板的副本。</li>
</ul>
</blockquote>
<p>html页面引用代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;my-pagination max-size=&quot;maxSize&quot; cur-page=&quot;currentPage&quot; view-by=&quot;viewby&quot; </div><div class="line">               items-per=&quot;itemsPerPage&quot; total-items=&quot;&#123;&#123;courseInfo.length&#125;&#125;&quot;</div><div class="line">               set-items-per-page=&quot;setItemsPerPage(viewby)&quot;&gt;</div><div class="line">&lt;/my-pagination&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文的内容是博主在封装一个angular的表格分页工具时的一些心得和体验，记录下来，方便之后的回顾。&lt;br&gt;所涉及到的angular的技术：指令的封装，angular的过滤&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>博客开发文档</title>
    <link href="http://yoursite.com/2016/10/15/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2016/10/15/博客开发文档/</id>
    <published>2016-10-15T15:34:49.000Z</published>
    <updated>2017-10-16T08:11:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<blockquote>
<p>test for hexo</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
